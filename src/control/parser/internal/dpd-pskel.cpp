// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "dpd-pskel.h"

namespace dpd
{
  // devicepkg_pskel
  //

  void devicepkg_pskel::
  title_parser (::xml_schema::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void devicepkg_pskel::
  author_parser (::dpd::author_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void devicepkg_pskel::
  description_parser (::xml_schema::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void devicepkg_pskel::
  hwdeviceregistration_parser (::dpd::hwdeviceregistration_pskel& p)
  {
    this->hwdeviceregistration_parser_ = &p;
  }

  void devicepkg_pskel::
  id_parser (::xml_schema::string_pskel& p)
  {
    this->id_parser_ = &p;
  }

  void devicepkg_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void devicepkg_pskel::
  version_parser (::xml_schema::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void devicepkg_pskel::
  parsers (::xml_schema::string_pskel& title,
           ::dpd::author_pskel& author,
           ::xml_schema::string_pskel& description,
           ::dpd::hwdeviceregistration_pskel& hwdeviceregistration,
           ::xml_schema::string_pskel& id,
           ::xml_schema::string_pskel& name,
           ::xml_schema::string_pskel& version)
  {
    this->title_parser_ = &title;
    this->author_parser_ = &author;
    this->description_parser_ = &description;
    this->hwdeviceregistration_parser_ = &hwdeviceregistration;
    this->id_parser_ = &id;
    this->name_parser_ = &name;
    this->version_parser_ = &version;
  }

  devicepkg_pskel::
  devicepkg_pskel ()
  : title_parser_ (0),
    author_parser_ (0),
    description_parser_ (0),
    hwdeviceregistration_parser_ (0),
    id_parser_ (0),
    name_parser_ (0),
    version_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // author_pskel
  //

  void author_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void author_pskel::
  company_parser (::xml_schema::string_pskel& p)
  {
    this->company_parser_ = &p;
  }

  void author_pskel::
  webpage_parser (::xml_schema::uri_pskel& p)
  {
    this->webpage_parser_ = &p;
  }

  void author_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::string_pskel& company,
           ::xml_schema::uri_pskel& webpage)
  {
    this->name_parser_ = &name;
    this->company_parser_ = &company;
    this->webpage_parser_ = &webpage;
  }

  author_pskel::
  author_pskel ()
  : name_parser_ (0),
    company_parser_ (0),
    webpage_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // hwdeviceregistration_pskel
  //

  void hwdeviceregistration_pskel::
  propertyfile_parser (::dpd::propertyfile_pskel& p)
  {
    this->propertyfile_parser_ = &p;
  }

  void hwdeviceregistration_pskel::
  description_parser (::xml_schema::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void hwdeviceregistration_pskel::
  manufacturer_parser (::xml_schema::string_pskel& p)
  {
    this->manufacturer_parser_ = &p;
  }

  void hwdeviceregistration_pskel::
  modelnumber_parser (::xml_schema::string_pskel& p)
  {
    this->modelnumber_parser_ = &p;
  }

  void hwdeviceregistration_pskel::
  deviceclass_parser (::dpd::deviceclass_pskel& p)
  {
    this->deviceclass_parser_ = &p;
  }

  void hwdeviceregistration_pskel::
  childhwdevice_parser (::dpd::childhwdevice_pskel& p)
  {
    this->childhwdevice_parser_ = &p;
  }

  void hwdeviceregistration_pskel::
  id_parser (::xml_schema::string_pskel& p)
  {
    this->id_parser_ = &p;
  }

  void hwdeviceregistration_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void hwdeviceregistration_pskel::
  version_parser (::xml_schema::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void hwdeviceregistration_pskel::
  parsers (::dpd::propertyfile_pskel& propertyfile,
           ::xml_schema::string_pskel& description,
           ::xml_schema::string_pskel& manufacturer,
           ::xml_schema::string_pskel& modelnumber,
           ::dpd::deviceclass_pskel& deviceclass,
           ::dpd::childhwdevice_pskel& childhwdevice,
           ::xml_schema::string_pskel& id,
           ::xml_schema::string_pskel& name,
           ::xml_schema::string_pskel& version)
  {
    this->propertyfile_parser_ = &propertyfile;
    this->description_parser_ = &description;
    this->manufacturer_parser_ = &manufacturer;
    this->modelnumber_parser_ = &modelnumber;
    this->deviceclass_parser_ = &deviceclass;
    this->childhwdevice_parser_ = &childhwdevice;
    this->id_parser_ = &id;
    this->name_parser_ = &name;
    this->version_parser_ = &version;
  }

  hwdeviceregistration_pskel::
  hwdeviceregistration_pskel ()
  : propertyfile_parser_ (0),
    description_parser_ (0),
    manufacturer_parser_ (0),
    modelnumber_parser_ (0),
    deviceclass_parser_ (0),
    childhwdevice_parser_ (0),
    id_parser_ (0),
    name_parser_ (0),
    version_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // propertyfile_pskel
  //

  void propertyfile_pskel::
  localfile_parser (::dpd::localfile_pskel& p)
  {
    this->localfile_parser_ = &p;
  }

  void propertyfile_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void propertyfile_pskel::
  parsers (::dpd::localfile_pskel& localfile,
           ::xml_schema::string_pskel& type)
  {
    this->localfile_parser_ = &localfile;
    this->type_parser_ = &type;
  }

  propertyfile_pskel::
  propertyfile_pskel ()
  : localfile_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // localfile_pskel
  //

  void localfile_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void localfile_pskel::
  parsers (::xml_schema::string_pskel& name)
  {
    this->name_parser_ = &name;
  }

  localfile_pskel::
  localfile_pskel ()
  : name_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // deviceclass_pskel
  //

  void deviceclass_pskel::
  class_parser (::xml_schema::string_pskel& p)
  {
    this->class__parser_ = &p;
  }

  void deviceclass_pskel::
  parsers (::xml_schema::string_pskel& class_)
  {
    this->class__parser_ = &class_;
  }

  deviceclass_pskel::
  deviceclass_pskel ()
  : class__parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // childhwdevice_pskel
  //

  void childhwdevice_pskel::
  hwdeviceregistration_parser (::dpd::hwdeviceregistration_pskel& p)
  {
    this->hwdeviceregistration_parser_ = &p;
  }

  void childhwdevice_pskel::
  devicepkgref_parser (::dpd::devicepkgref_pskel& p)
  {
    this->devicepkgref_parser_ = &p;
  }

  void childhwdevice_pskel::
  parsers (::dpd::hwdeviceregistration_pskel& hwdeviceregistration,
           ::dpd::devicepkgref_pskel& devicepkgref)
  {
    this->hwdeviceregistration_parser_ = &hwdeviceregistration;
    this->devicepkgref_parser_ = &devicepkgref;
  }

  childhwdevice_pskel::
  childhwdevice_pskel ()
  : hwdeviceregistration_parser_ (0),
    devicepkgref_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // devicepkgref_pskel
  //

  void devicepkgref_pskel::
  localfile_parser (::dpd::localfile_pskel& p)
  {
    this->localfile_parser_ = &p;
  }

  void devicepkgref_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void devicepkgref_pskel::
  parsers (::dpd::localfile_pskel& localfile,
           ::xml_schema::string_pskel& type)
  {
    this->localfile_parser_ = &localfile;
    this->type_parser_ = &type;
  }

  devicepkgref_pskel::
  devicepkgref_pskel ()
  : localfile_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

namespace dpd
{
  // devicepkg_pskel
  //

  void devicepkg_pskel::
  title (const ::std::string&)
  {
  }

  void devicepkg_pskel::
  author ()
  {
  }

  void devicepkg_pskel::
  description (const ::std::string&)
  {
  }

  void devicepkg_pskel::
  hwdeviceregistration ()
  {
  }

  void devicepkg_pskel::
  id (const ::std::string&)
  {
  }

  void devicepkg_pskel::
  name (const ::std::string&)
  {
  }

  void devicepkg_pskel::
  version (const ::std::string&)
  {
  }

  void devicepkg_pskel::
  post_devicepkg ()
  {
  }

  // author_pskel
  //

  void author_pskel::
  name (const ::std::string&)
  {
  }

  void author_pskel::
  company (const ::std::string&)
  {
  }

  void author_pskel::
  webpage (const ::std::string&)
  {
  }

  void author_pskel::
  post_author ()
  {
  }

  // hwdeviceregistration_pskel
  //

  void hwdeviceregistration_pskel::
  propertyfile ()
  {
  }

  void hwdeviceregistration_pskel::
  description (const ::std::string&)
  {
  }

  void hwdeviceregistration_pskel::
  manufacturer (const ::std::string&)
  {
  }

  void hwdeviceregistration_pskel::
  modelnumber (const ::std::string&)
  {
  }

  void hwdeviceregistration_pskel::
  deviceclass ()
  {
  }

  void hwdeviceregistration_pskel::
  childhwdevice ()
  {
  }

  void hwdeviceregistration_pskel::
  id (const ::std::string&)
  {
  }

  void hwdeviceregistration_pskel::
  name (const ::std::string&)
  {
  }

  void hwdeviceregistration_pskel::
  version (const ::std::string&)
  {
  }

  void hwdeviceregistration_pskel::
  post_hwdeviceregistration ()
  {
  }

  // propertyfile_pskel
  //

  void propertyfile_pskel::
  localfile ()
  {
  }

  void propertyfile_pskel::
  type (const ::std::string&)
  {
  }

  void propertyfile_pskel::
  post_propertyfile ()
  {
  }

  // localfile_pskel
  //

  void localfile_pskel::
  name (const ::std::string&)
  {
  }

  void localfile_pskel::
  post_localfile ()
  {
  }

  // deviceclass_pskel
  //

  void deviceclass_pskel::
  class_ (const ::std::string&)
  {
  }

  void deviceclass_pskel::
  post_deviceclass ()
  {
  }

  // childhwdevice_pskel
  //

  void childhwdevice_pskel::
  hwdeviceregistration ()
  {
  }

  void childhwdevice_pskel::
  devicepkgref ()
  {
  }

  void childhwdevice_pskel::
  post_childhwdevice ()
  {
  }

  // devicepkgref_pskel
  //

  void devicepkgref_pskel::
  localfile ()
  {
  }

  void devicepkgref_pskel::
  type (const ::std::string&)
  {
  }

  void devicepkgref_pskel::
  post_devicepkgref ()
  {
  }
}

#include <cassert>

namespace dpd
{
  // Element validation and dispatch functions for devicepkg_pskel.
  //
  bool devicepkg_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "title" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 0UL;
        else if (n == "author" &&
                 ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &devicepkg_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "title",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool devicepkg_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void devicepkg_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void devicepkg_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "urn:mil:jpeojtrs:sca:dpd", "title");

    this->v_state_stack_.pop ();
  }

  void devicepkg_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "title" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->title_parser_;

            if (this->title_parser_)
              this->title_parser_->pre ();
          }
          else
          {
            if (this->title_parser_)
            {
              const ::std::string& tmp (this->title_parser_->post_string ());
              this->title (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "author" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->author_parser_;

            if (this->author_parser_)
              this->author_parser_->pre ();
          }
          else
          {
            if (this->author_parser_)
            {
              this->author_parser_->post_author ();
              this->author ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "author",
              ns, n);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "description" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->description_parser_;

            if (this->description_parser_)
              this->description_parser_->pre ();
          }
          else
          {
            if (this->description_parser_)
            {
              const ::std::string& tmp (this->description_parser_->post_string ());
              this->description (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "hwdeviceregistration" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->hwdeviceregistration_parser_;

            if (this->hwdeviceregistration_parser_)
              this->hwdeviceregistration_parser_->pre ();
          }
          else
          {
            if (this->hwdeviceregistration_parser_)
            {
              this->hwdeviceregistration_parser_->post_hwdeviceregistration ();
              this->hwdeviceregistration ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "hwdeviceregistration",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for author_pskel.
  //
  bool author_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 0UL;
        else if (n == "company" &&
                 ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 1UL;
        else if (n == "webpage" &&
                 ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &author_pskel::choice_0;
          vd->state = s;
          vd->count = 0;

          this->choice_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool author_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void author_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void author_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void author_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

            if (this->name_parser_)
              this->name_parser_->pre ();
          }
          else
          {
            if (this->name_parser_)
            {
              const ::std::string& tmp (this->name_parser_->post_string ());
              this->name (tmp);
            }

            count++;
          }
        }
        else
        {
          assert (start);
          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->company_parser_;

          if (this->company_parser_)
            this->company_parser_->pre ();
        }
        else
        {
          if (this->company_parser_)
          {
            const ::std::string& tmp (this->company_parser_->post_string ());
            this->company (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 2UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->webpage_parser_;

          if (this->webpage_parser_)
            this->webpage_parser_->pre ();
        }
        else
        {
          if (this->webpage_parser_)
          {
            const ::std::string& tmp (this->webpage_parser_->post_uri ());
            this->webpage (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for hwdeviceregistration_pskel.
  //
  bool hwdeviceregistration_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "propertyfile" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 0UL;
        else if (n == "description" &&
                 ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &hwdeviceregistration_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "propertyfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool hwdeviceregistration_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void hwdeviceregistration_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void hwdeviceregistration_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "urn:mil:jpeojtrs:sca:dpd", "propertyfile");

    this->v_state_stack_.pop ();
  }

  void hwdeviceregistration_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "propertyfile" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->propertyfile_parser_;

            if (this->propertyfile_parser_)
              this->propertyfile_parser_->pre ();
          }
          else
          {
            if (this->propertyfile_parser_)
            {
              this->propertyfile_parser_->post_propertyfile ();
              this->propertyfile ();
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "description" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->description_parser_;

            if (this->description_parser_)
              this->description_parser_->pre ();
          }
          else
          {
            if (this->description_parser_)
            {
              const ::std::string& tmp (this->description_parser_->post_string ());
              this->description (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "description",
              ns, n);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "manufacturer" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->manufacturer_parser_;

            if (this->manufacturer_parser_)
              this->manufacturer_parser_->pre ();
          }
          else
          {
            if (this->manufacturer_parser_)
            {
              const ::std::string& tmp (this->manufacturer_parser_->post_string ());
              this->manufacturer (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "manufacturer",
              ns, n);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "modelnumber" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->modelnumber_parser_;

            if (this->modelnumber_parser_)
              this->modelnumber_parser_->pre ();
          }
          else
          {
            if (this->modelnumber_parser_)
            {
              const ::std::string& tmp (this->modelnumber_parser_->post_string ());
              this->modelnumber (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "modelnumber",
              ns, n);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "deviceclass" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->deviceclass_parser_;

            if (this->deviceclass_parser_)
              this->deviceclass_parser_->pre ();
          }
          else
          {
            if (this->deviceclass_parser_)
            {
              this->deviceclass_parser_->post_deviceclass ();
              this->deviceclass ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "deviceclass",
              ns, n);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "childhwdevice" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->childhwdevice_parser_;

            if (this->childhwdevice_parser_)
              this->childhwdevice_parser_->pre ();
          }
          else
          {
            if (this->childhwdevice_parser_)
            {
              this->childhwdevice_parser_->post_childhwdevice ();
              this->childhwdevice ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for propertyfile_pskel.
  //
  bool propertyfile_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "localfile" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &propertyfile_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "localfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool propertyfile_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void propertyfile_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void propertyfile_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "urn:mil:jpeojtrs:sca:dpd", "localfile");

    this->v_state_stack_.pop ();
  }

  void propertyfile_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "localfile" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->localfile_parser_;

            if (this->localfile_parser_)
              this->localfile_parser_->pre ();
          }
          else
          {
            if (this->localfile_parser_)
            {
              this->localfile_parser_->post_localfile ();
              this->localfile ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "localfile",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for deviceclass_pskel.
  //
  bool deviceclass_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "class" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &deviceclass_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "class",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool deviceclass_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void deviceclass_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void deviceclass_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "urn:mil:jpeojtrs:sca:dpd", "class");

    this->v_state_stack_.pop ();
  }

  void deviceclass_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "class" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->class__parser_;

            if (this->class__parser_)
              this->class__parser_->pre ();
          }
          else
          {
            if (this->class__parser_)
            {
              const ::std::string& tmp (this->class__parser_->post_string ());
              this->class_ (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "class",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for childhwdevice_pskel.
  //
  bool childhwdevice_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "hwdeviceregistration" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 0UL;
        else if (n == "devicepkgref" &&
                 ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &childhwdevice_pskel::choice_0;
          vd->state = s;
          vd->count = 0;

          this->choice_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "hwdeviceregistration",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool childhwdevice_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void childhwdevice_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void childhwdevice_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "urn:mil:jpeojtrs:sca:dpd", "hwdeviceregistration");

    this->v_state_stack_.pop ();
  }

  void childhwdevice_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->hwdeviceregistration_parser_;

          if (this->hwdeviceregistration_parser_)
            this->hwdeviceregistration_parser_->pre ();
        }
        else
        {
          if (this->hwdeviceregistration_parser_)
          {
            this->hwdeviceregistration_parser_->post_hwdeviceregistration ();
            this->hwdeviceregistration ();
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->devicepkgref_parser_;

          if (this->devicepkgref_parser_)
            this->devicepkgref_parser_->pre ();
        }
        else
        {
          if (this->devicepkgref_parser_)
          {
            this->devicepkgref_parser_->post_devicepkgref ();
            this->devicepkgref ();
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for devicepkgref_pskel.
  //
  bool devicepkgref_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "localfile" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &devicepkgref_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "localfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool devicepkgref_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void devicepkgref_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void devicepkgref_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "urn:mil:jpeojtrs:sca:dpd", "localfile");

    this->v_state_stack_.pop ();
  }

  void devicepkgref_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "localfile" &&
            ns == "urn:mil:jpeojtrs:sca:dpd")
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->localfile_parser_;

            if (this->localfile_parser_)
              this->localfile_parser_->pre ();
          }
          else
          {
            if (this->localfile_parser_)
            {
              this->localfile_parser_->post_localfile ();
              this->localfile ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "urn:mil:jpeojtrs:sca:dpd", "localfile",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace dpd
{
  // Attribute validation and dispatch functions for devicepkg_pskel.
  //
  bool devicepkg_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();
        this->id_parser_->_pre_impl ();
        this->id_parser_->_characters (s);
        this->id_parser_->_post_impl ();
        const ::std::string& tmp (this->id_parser_->post_string ());
        this->id (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "version" && ns.empty ())
    {
      if (this->version_parser_)
      {
        this->version_parser_->pre ();
        this->version_parser_->_pre_impl ();
        this->version_parser_->_characters (s);
        this->version_parser_->_post_impl ();
        const ::std::string& tmp (this->version_parser_->post_string ());
        this->version (tmp);
      }

      return true;
    }

    return false;
  }

  void devicepkg_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.id = false;
    as.name = false;
  }

  void devicepkg_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.id)
      this->_expected_attribute (
        "", "id");
    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for hwdeviceregistration_pskel.
  //
  bool hwdeviceregistration_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();
        this->id_parser_->_pre_impl ();
        this->id_parser_->_characters (s);
        this->id_parser_->_post_impl ();
        const ::std::string& tmp (this->id_parser_->post_string ());
        this->id (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "version" && ns.empty ())
    {
      if (this->version_parser_)
      {
        this->version_parser_->pre ();
        this->version_parser_->_pre_impl ();
        this->version_parser_->_characters (s);
        this->version_parser_->_post_impl ();
        const ::std::string& tmp (this->version_parser_->post_string ());
        this->version (tmp);
      }

      return true;
    }

    return false;
  }

  void hwdeviceregistration_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.id = false;
    as.name = false;
  }

  void hwdeviceregistration_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.id)
      this->_expected_attribute (
        "", "id");
    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for propertyfile_pskel.
  //
  bool propertyfile_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_string ());
        this->type (tmp);
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for localfile_pskel.
  //
  bool localfile_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    return false;
  }

  void localfile_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void localfile_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for devicepkgref_pskel.
  //
  bool devicepkgref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_string ());
        this->type (tmp);
      }

      return true;
    }

    return false;
  }
}

namespace dpd
{
}

// Begin epilogue.
//
//
// End epilogue.

