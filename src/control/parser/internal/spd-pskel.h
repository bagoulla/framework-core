// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX______XML_XSD_SPD_PSKEL_H
#define CXX______XML_XSD_SPD_PSKEL_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace spd
{
  class softPkg_pskel;
  class localFile_pskel;
  class propertyFile_pskel;
  class author_pskel;
  class descriptor_pskel;
  class implementation_pskel;
  class code_pskel;
  class codeFileType_pskel;
  class compiler_pskel;
  class programmingLanguage_pskel;
  class humanLanguage_pskel;
  class os_pskel;
  class processor_pskel;
  class dependency_pskel;
  class runtime_pskel;
  class propertyRef_pskel;
  class softPkgRef_pskel;
  class implRef_pskel;
  class usesDevice_pskel;
  class simpleref_pskel;
  class simplesequenceref_pskel;
  class structref_pskel;
  class structsequenceref_pskel;
  class structvalue_pskel;
  class values_pskel;
  class aepcompliance_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/expat/elements.hxx>

#include "vector"
#include "utility"
#include "memory"
#include "map"
#include "../../include/ossie/componentProfile.h"
#include "../../include/ossie/SoftPkg.h"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Document type. See libxsd/xsd/cxx/parser/expat/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::expat::document< char > document;
}

namespace spd
{
  class softPkg_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    title (const ::std::string&);

    virtual void
    author (const ossie::SPD::Author&);

    virtual void
    description (const ::std::string&);

    virtual void
    propertyfile (const ::std::string&);

    virtual void
    descriptor (const ::std::string&);

    virtual void
    implementation (const ossie::SPD::Implementation&);

    virtual void
    usesdevice (const ossie::SPD::UsesDevice&);

    virtual void
    id (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    version (const ::std::string&);

    virtual std::auto_ptr<ossie::SPD>
    post_softPkg () = 0;

    // Parser construction API.
    //
    void
    title_parser (::xml_schema::string_pskel&);

    void
    author_parser (::spd::author_pskel&);

    void
    description_parser (::xml_schema::string_pskel&);

    void
    propertyfile_parser (::spd::propertyFile_pskel&);

    void
    descriptor_parser (::spd::descriptor_pskel&);

    void
    implementation_parser (::spd::implementation_pskel&);

    void
    usesdevice_parser (::spd::usesDevice_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    void
    version_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* title */,
             ::spd::author_pskel& /* author */,
             ::xml_schema::string_pskel& /* description */,
             ::spd::propertyFile_pskel& /* propertyfile */,
             ::spd::descriptor_pskel& /* descriptor */,
             ::spd::implementation_pskel& /* implementation */,
             ::spd::usesDevice_pskel& /* usesdevice */,
             ::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* type */,
             ::xml_schema::string_pskel& /* version */);

    // Constructor.
    //
    softPkg_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* title_parser_;
    ::spd::author_pskel* author_parser_;
    ::xml_schema::string_pskel* description_parser_;
    ::spd::propertyFile_pskel* propertyfile_parser_;
    ::spd::descriptor_pskel* descriptor_parser_;
    ::spd::implementation_pskel* implementation_parser_;
    ::spd::usesDevice_pskel* usesdevice_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* type_parser_;
    ::xml_schema::string_pskel* version_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::softPkg_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class localFile_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual ::std::string
    post_localFile () = 0;

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    localFile_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class propertyFile_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    localfile (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual ::std::string
    post_propertyFile () = 0;

    // Parser construction API.
    //
    void
    localfile_parser (::spd::localFile_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    void
    parsers (::spd::localFile_pskel& /* localfile */,
             ::xml_schema::string_pskel& /* type */);

    // Constructor.
    //
    propertyFile_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::spd::localFile_pskel* localfile_parser_;
    ::xml_schema::string_pskel* type_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::propertyFile_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class author_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    company (const ::std::string&);

    virtual void
    webpage (const ::std::string&);

    virtual ossie::SPD::Author
    post_author () = 0;

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    company_parser (::xml_schema::string_pskel&);

    void
    webpage_parser (::xml_schema::uri_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* company */,
             ::xml_schema::uri_pskel& /* webpage */);

    // Constructor.
    //
    author_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* company_parser_;
    ::xml_schema::uri_pskel* webpage_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::author_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class descriptor_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    localfile (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual ::std::string
    post_descriptor () = 0;

    // Parser construction API.
    //
    void
    localfile_parser (::spd::localFile_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::spd::localFile_pskel& /* localfile */,
             ::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    descriptor_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::spd::localFile_pskel* localfile_parser_;
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::descriptor_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class implementation_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    description (const ::std::string&);

    virtual void
    propertyfile (const ::std::string&);

    virtual void
    code (const ossie::SPD::Code&);

    virtual void
    compiler (const ossie::SPD::NameVersionPair&);

    virtual void
    programminglanguage ();

    virtual void
    humanlanguage ();

    virtual void
    runtime (const ossie::SPD::NameVersionPair&);

    virtual void
    os (const ossie::SPD::NameVersionPair&);

    virtual void
    processor (const ::std::string&);

    virtual void
    dependency (ossie::SPD::DependencyRef*);

    virtual void
    usesdevice (const ossie::SPD::UsesDevice&);

    virtual void
    id (const ::std::string&);

    virtual void
    aepcompliance ();

    virtual ossie::SPD::Implementation
    post_implementation () = 0;

    // Parser construction API.
    //
    void
    description_parser (::xml_schema::string_pskel&);

    void
    propertyfile_parser (::spd::propertyFile_pskel&);

    void
    code_parser (::spd::code_pskel&);

    void
    compiler_parser (::spd::compiler_pskel&);

    void
    programminglanguage_parser (::spd::programmingLanguage_pskel&);

    void
    humanlanguage_parser (::spd::humanLanguage_pskel&);

    void
    runtime_parser (::spd::runtime_pskel&);

    void
    os_parser (::spd::os_pskel&);

    void
    processor_parser (::spd::processor_pskel&);

    void
    dependency_parser (::spd::dependency_pskel&);

    void
    usesdevice_parser (::spd::usesDevice_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    aepcompliance_parser (::spd::aepcompliance_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* description */,
             ::spd::propertyFile_pskel& /* propertyfile */,
             ::spd::code_pskel& /* code */,
             ::spd::compiler_pskel& /* compiler */,
             ::spd::programmingLanguage_pskel& /* programminglanguage */,
             ::spd::humanLanguage_pskel& /* humanlanguage */,
             ::spd::runtime_pskel& /* runtime */,
             ::spd::os_pskel& /* os */,
             ::spd::processor_pskel& /* processor */,
             ::spd::dependency_pskel& /* dependency */,
             ::spd::usesDevice_pskel& /* usesdevice */,
             ::xml_schema::string_pskel& /* id */,
             ::spd::aepcompliance_pskel& /* aepcompliance */);

    // Constructor.
    //
    implementation_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* description_parser_;
    ::spd::propertyFile_pskel* propertyfile_parser_;
    ::spd::code_pskel* code_parser_;
    ::spd::compiler_pskel* compiler_parser_;
    ::spd::programmingLanguage_pskel* programminglanguage_parser_;
    ::spd::humanLanguage_pskel* humanlanguage_parser_;
    ::spd::runtime_pskel* runtime_parser_;
    ::spd::os_pskel* os_parser_;
    ::spd::processor_pskel* processor_parser_;
    ::spd::dependency_pskel* dependency_parser_;
    ::spd::usesDevice_pskel* usesdevice_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::spd::aepcompliance_pskel* aepcompliance_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::implementation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class code_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    localfile (const ::std::string&);

    virtual void
    entrypoint (const ::std::string&);

    virtual void
    stacksize (unsigned long long);

    virtual void
    priority (unsigned long long);

    virtual void
    type (const ::std::string&);

    virtual ossie::SPD::Code
    post_code () = 0;

    // Parser construction API.
    //
    void
    localfile_parser (::spd::localFile_pskel&);

    void
    entrypoint_parser (::xml_schema::string_pskel&);

    void
    stacksize_parser (::xml_schema::unsigned_long_pskel&);

    void
    priority_parser (::xml_schema::unsigned_long_pskel&);

    void
    type_parser (::spd::codeFileType_pskel&);

    void
    parsers (::spd::localFile_pskel& /* localfile */,
             ::xml_schema::string_pskel& /* entrypoint */,
             ::xml_schema::unsigned_long_pskel& /* stacksize */,
             ::xml_schema::unsigned_long_pskel& /* priority */,
             ::spd::codeFileType_pskel& /* type */);

    // Constructor.
    //
    code_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::spd::localFile_pskel* localfile_parser_;
    ::xml_schema::string_pskel* entrypoint_parser_;
    ::xml_schema::unsigned_long_pskel* stacksize_parser_;
    ::xml_schema::unsigned_long_pskel* priority_parser_;
    ::spd::codeFileType_pskel* type_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::code_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class codeFileType_pskel: public virtual ::xml_schema::nmtoken_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::std::string
    post_codeFileType ();
  };

  class compiler_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    version (const ::std::string&);

    virtual ossie::SPD::NameVersionPair
    post_compiler () = 0;

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    version_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* version */);

    // Constructor.
    //
    compiler_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* version_parser_;

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class programmingLanguage_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    version (const ::std::string&);

    virtual void
    post_programmingLanguage ();

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    version_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* version */);

    // Constructor.
    //
    programmingLanguage_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* version_parser_;

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class humanLanguage_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    post_humanLanguage ();

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    humanLanguage_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class os_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    version (const ::std::string&);

    virtual ossie::SPD::NameVersionPair
    post_os () = 0;

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    version_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* version */);

    // Constructor.
    //
    os_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* version_parser_;

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class processor_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual ::std::string
    post_processor () = 0;

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    processor_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class dependency_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    softpkgref (const ossie::SPD::SoftPkgRef&);

    virtual void
    propertyref (const ossie::SPD::PropertyRef&);

    virtual void
    simpleref (ossie::SimplePropertyRef*);

    virtual void
    simplesequenceref (ossie::SimpleSequencePropertyRef*);

    virtual void
    structref (ossie::StructPropertyRef*);

    virtual void
    structsequenceref (ossie::StructSequencePropertyRef*);

    virtual void
    type (const ::std::string&);

    virtual ossie::SPD::DependencyRef*
    post_dependency () = 0;

    // Parser construction API.
    //
    void
    softpkgref_parser (::spd::softPkgRef_pskel&);

    void
    propertyref_parser (::spd::propertyRef_pskel&);

    void
    simpleref_parser (::spd::simpleref_pskel&);

    void
    simplesequenceref_parser (::spd::simplesequenceref_pskel&);

    void
    structref_parser (::spd::structref_pskel&);

    void
    structsequenceref_parser (::spd::structsequenceref_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    void
    parsers (::spd::softPkgRef_pskel& /* softpkgref */,
             ::spd::propertyRef_pskel& /* propertyref */,
             ::spd::simpleref_pskel& /* simpleref */,
             ::spd::simplesequenceref_pskel& /* simplesequenceref */,
             ::spd::structref_pskel& /* structref */,
             ::spd::structsequenceref_pskel& /* structsequenceref */,
             ::xml_schema::string_pskel& /* type */);

    // Constructor.
    //
    dependency_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::spd::softPkgRef_pskel* softpkgref_parser_;
    ::spd::propertyRef_pskel* propertyref_parser_;
    ::spd::simpleref_pskel* simpleref_parser_;
    ::spd::simplesequenceref_pskel* simplesequenceref_parser_;
    ::spd::structref_pskel* structref_parser_;
    ::spd::structsequenceref_pskel* structsequenceref_parser_;
    ::xml_schema::string_pskel* type_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::dependency_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

    protected:
    struct v_state_attr_
    {
      bool type;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class runtime_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual void
    version (const ::std::string&);

    virtual ossie::SPD::NameVersionPair
    post_runtime () = 0;

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    version_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */,
             ::xml_schema::string_pskel& /* version */);

    // Constructor.
    //
    runtime_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* name_parser_;
    ::xml_schema::string_pskel* version_parser_;

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class propertyRef_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    refid (const ::std::string&);

    virtual void
    value (const ::std::string&);

    virtual ossie::SPD::PropertyRef
    post_propertyRef () = 0;

    // Parser construction API.
    //
    void
    refid_parser (::xml_schema::string_pskel&);

    void
    value_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* refid */,
             ::xml_schema::string_pskel& /* value */);

    // Constructor.
    //
    propertyRef_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* refid_parser_;
    ::xml_schema::string_pskel* value_parser_;

    protected:
    struct v_state_attr_
    {
      bool refid;
      bool value;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class softPkgRef_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    localfile (const ::std::string&);

    virtual void
    implref (const ::std::string&);

    virtual ossie::SPD::SoftPkgRef
    post_softPkgRef () = 0;

    // Parser construction API.
    //
    void
    localfile_parser (::spd::localFile_pskel&);

    void
    implref_parser (::spd::implRef_pskel&);

    void
    parsers (::spd::localFile_pskel& /* localfile */,
             ::spd::implRef_pskel& /* implref */);

    // Constructor.
    //
    softPkgRef_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::spd::localFile_pskel* localfile_parser_;
    ::spd::implRef_pskel* implref_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::softPkgRef_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class implRef_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    refid (const ::std::string&);

    virtual ::std::string
    post_implRef () = 0;

    // Parser construction API.
    //
    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    implRef_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class usesDevice_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    propertyref (const ossie::SPD::PropertyRef&);

    virtual void
    simpleref (ossie::SimplePropertyRef*);

    virtual void
    simplesequenceref (ossie::SimpleSequencePropertyRef*);

    virtual void
    structref (ossie::StructPropertyRef*);

    virtual void
    structsequenceref (ossie::StructSequencePropertyRef*);

    virtual void
    id (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual ossie::SPD::UsesDevice
    post_usesDevice () = 0;

    // Parser construction API.
    //
    void
    propertyref_parser (::spd::propertyRef_pskel&);

    void
    simpleref_parser (::spd::simpleref_pskel&);

    void
    simplesequenceref_parser (::spd::simplesequenceref_pskel&);

    void
    structref_parser (::spd::structref_pskel&);

    void
    structsequenceref_parser (::spd::structsequenceref_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    void
    parsers (::spd::propertyRef_pskel& /* propertyref */,
             ::spd::simpleref_pskel& /* simpleref */,
             ::spd::simplesequenceref_pskel& /* simplesequenceref */,
             ::spd::structref_pskel& /* structref */,
             ::spd::structsequenceref_pskel& /* structsequenceref */,
             ::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* type */);

    // Constructor.
    //
    usesDevice_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::spd::propertyRef_pskel* propertyref_parser_;
    ::spd::simpleref_pskel* simpleref_parser_;
    ::spd::simplesequenceref_pskel* simplesequenceref_parser_;
    ::spd::structref_pskel* structref_parser_;
    ::spd::structsequenceref_pskel* structsequenceref_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* type_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::usesDevice_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
      bool type;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class simpleref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    refid (const ::std::string&);

    virtual void
    value (const ::std::string&);

    virtual ossie::SimplePropertyRef*
    post_simpleref () = 0;

    // Parser construction API.
    //
    void
    refid_parser (::xml_schema::string_pskel&);

    void
    value_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* refid */,
             ::xml_schema::string_pskel& /* value */);

    // Constructor.
    //
    simpleref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* refid_parser_;
    ::xml_schema::string_pskel* value_parser_;

    protected:
    struct v_state_attr_
    {
      bool refid;
      bool value;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class simplesequenceref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    values (const ::std::vector<std::string>&);

    virtual void
    refid (const ::std::string&);

    virtual ossie::SimpleSequencePropertyRef*
    post_simplesequenceref () = 0;

    // Parser construction API.
    //
    void
    values_parser (::spd::values_pskel&);

    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::spd::values_pskel& /* values */,
             ::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    simplesequenceref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::spd::values_pskel* values_parser_;
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::simplesequenceref_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class structref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    simpleref (ossie::SimplePropertyRef*);

    virtual void
    refid (const ::std::string&);

    virtual ossie::StructPropertyRef*
    post_structref () = 0;

    // Parser construction API.
    //
    void
    simpleref_parser (::spd::simpleref_pskel&);

    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::spd::simpleref_pskel& /* simpleref */,
             ::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    structref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::spd::simpleref_pskel* simpleref_parser_;
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::structref_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class structsequenceref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    structvalue (const ::std::map<std::string, std::string>&);

    virtual void
    refid (const ::std::string&);

    virtual ossie::StructSequencePropertyRef*
    post_structsequenceref () = 0;

    // Parser construction API.
    //
    void
    structvalue_parser (::spd::structvalue_pskel&);

    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::spd::structvalue_pskel& /* structvalue */,
             ::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    structsequenceref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::spd::structvalue_pskel* structvalue_parser_;
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::structsequenceref_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class structvalue_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    simpleref (ossie::SimplePropertyRef*);

    virtual ::std::map<std::string, std::string>
    post_structvalue () = 0;

    // Parser construction API.
    //
    void
    simpleref_parser (::spd::simpleref_pskel&);

    void
    parsers (::spd::simpleref_pskel& /* simpleref */);

    // Constructor.
    //
    structvalue_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::spd::simpleref_pskel* simpleref_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::structvalue_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class values_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    value (const ::std::string&);

    virtual ::std::vector<std::string>
    post_values () = 0;

    // Parser construction API.
    //
    void
    value_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* value */);

    // Constructor.
    //
    values_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* value_parser_;

    protected:
    struct v_state_descr_
    {
      void (::spd::values_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class aepcompliance_pskel: public virtual ::xml_schema::nmtoken_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_aepcompliance ();
  };
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX______XML_XSD_SPD_PSKEL_H
