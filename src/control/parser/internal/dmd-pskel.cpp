// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "dmd-pskel.h"

namespace dmd
{
  // domainmanagerconfiguration_pskel
  //

  void domainmanagerconfiguration_pskel::
  description_parser (::xml_schema::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void domainmanagerconfiguration_pskel::
  domainmanagersoftpkg_parser (::dmd::domainmanagersoftpkg_pskel& p)
  {
    this->domainmanagersoftpkg_parser_ = &p;
  }

  void domainmanagerconfiguration_pskel::
  services_parser (::dmd::services_pskel& p)
  {
    this->services_parser_ = &p;
  }

  void domainmanagerconfiguration_pskel::
  id_parser (::xml_schema::string_pskel& p)
  {
    this->id_parser_ = &p;
  }

  void domainmanagerconfiguration_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void domainmanagerconfiguration_pskel::
  parsers (::xml_schema::string_pskel& description,
           ::dmd::domainmanagersoftpkg_pskel& domainmanagersoftpkg,
           ::dmd::services_pskel& services,
           ::xml_schema::string_pskel& id,
           ::xml_schema::string_pskel& name)
  {
    this->description_parser_ = &description;
    this->domainmanagersoftpkg_parser_ = &domainmanagersoftpkg;
    this->services_parser_ = &services;
    this->id_parser_ = &id;
    this->name_parser_ = &name;
  }

  domainmanagerconfiguration_pskel::
  domainmanagerconfiguration_pskel ()
  : description_parser_ (0),
    domainmanagersoftpkg_parser_ (0),
    services_parser_ (0),
    id_parser_ (0),
    name_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // domainmanagersoftpkg_pskel
  //

  void domainmanagersoftpkg_pskel::
  localfile_parser (::dmd::localfile_pskel& p)
  {
    this->localfile_parser_ = &p;
  }

  void domainmanagersoftpkg_pskel::
  parsers (::dmd::localfile_pskel& localfile)
  {
    this->localfile_parser_ = &localfile;
  }

  domainmanagersoftpkg_pskel::
  domainmanagersoftpkg_pskel ()
  : localfile_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // localfile_pskel
  //

  void localfile_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void localfile_pskel::
  parsers (::xml_schema::string_pskel& name)
  {
    this->name_parser_ = &name;
  }

  localfile_pskel::
  localfile_pskel ()
  : name_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // services_pskel
  //

  void services_pskel::
  service_parser (::dmd::service_pskel& p)
  {
    this->service_parser_ = &p;
  }

  void services_pskel::
  parsers (::dmd::service_pskel& service)
  {
    this->service_parser_ = &service;
  }

  services_pskel::
  services_pskel ()
  : service_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // service_pskel
  //

  void service_pskel::
  usesidentifier_parser (::xml_schema::string_pskel& p)
  {
    this->usesidentifier_parser_ = &p;
  }

  void service_pskel::
  findby_parser (::dmd::findby_pskel& p)
  {
    this->findby_parser_ = &p;
  }

  void service_pskel::
  parsers (::xml_schema::string_pskel& usesidentifier,
           ::dmd::findby_pskel& findby)
  {
    this->usesidentifier_parser_ = &usesidentifier;
    this->findby_parser_ = &findby;
  }

  service_pskel::
  service_pskel ()
  : usesidentifier_parser_ (0),
    findby_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // findby_pskel
  //

  void findby_pskel::
  namingservice_parser (::dmd::namingservice_pskel& p)
  {
    this->namingservice_parser_ = &p;
  }

  void findby_pskel::
  stringifiedobjectref_parser (::xml_schema::string_pskel& p)
  {
    this->stringifiedobjectref_parser_ = &p;
  }

  void findby_pskel::
  domainfinder_parser (::dmd::domainfinder_pskel& p)
  {
    this->domainfinder_parser_ = &p;
  }

  void findby_pskel::
  parsers (::dmd::namingservice_pskel& namingservice,
           ::xml_schema::string_pskel& stringifiedobjectref,
           ::dmd::domainfinder_pskel& domainfinder)
  {
    this->namingservice_parser_ = &namingservice;
    this->stringifiedobjectref_parser_ = &stringifiedobjectref;
    this->domainfinder_parser_ = &domainfinder;
  }

  findby_pskel::
  findby_pskel ()
  : namingservice_parser_ (0),
    stringifiedobjectref_parser_ (0),
    domainfinder_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // namingservice_pskel
  //

  void namingservice_pskel::
  name_parser (::xml_schema::any_simple_type_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void namingservice_pskel::
  parsers (::xml_schema::any_simple_type_pskel& name)
  {
    this->name_parser_ = &name;
  }

  namingservice_pskel::
  namingservice_pskel ()
  : name_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // domainfinder_pskel
  //

  void domainfinder_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void domainfinder_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void domainfinder_pskel::
  parsers (::xml_schema::string_pskel& type,
           ::xml_schema::string_pskel& name)
  {
    this->type_parser_ = &type;
    this->name_parser_ = &name;
  }

  domainfinder_pskel::
  domainfinder_pskel ()
  : type_parser_ (0),
    name_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }
}

namespace dmd
{
  // domainmanagerconfiguration_pskel
  //

  void domainmanagerconfiguration_pskel::
  description (const ::std::string&)
  {
  }

  void domainmanagerconfiguration_pskel::
  domainmanagersoftpkg (const ::std::string&)
  {
  }

  void domainmanagerconfiguration_pskel::
  services ()
  {
  }

  void domainmanagerconfiguration_pskel::
  id (const ::std::string&)
  {
  }

  void domainmanagerconfiguration_pskel::
  name (const ::std::string&)
  {
  }

  // domainmanagersoftpkg_pskel
  //

  void domainmanagersoftpkg_pskel::
  localfile (const ::std::string&)
  {
  }

  // localfile_pskel
  //

  void localfile_pskel::
  name (const ::std::string&)
  {
  }

  // services_pskel
  //

  void services_pskel::
  service ()
  {
  }

  void services_pskel::
  post_services ()
  {
  }

  // service_pskel
  //

  void service_pskel::
  usesidentifier (const ::std::string&)
  {
  }

  void service_pskel::
  findby ()
  {
  }

  void service_pskel::
  post_service ()
  {
  }

  // findby_pskel
  //

  void findby_pskel::
  namingservice ()
  {
  }

  void findby_pskel::
  stringifiedobjectref (const ::std::string&)
  {
  }

  void findby_pskel::
  domainfinder ()
  {
  }

  void findby_pskel::
  post_findby ()
  {
  }

  // namingservice_pskel
  //

  void namingservice_pskel::
  name ()
  {
  }

  void namingservice_pskel::
  post_namingservice ()
  {
  }

  // domainfinder_pskel
  //

  void domainfinder_pskel::
  type (const ::std::string&)
  {
  }

  void domainfinder_pskel::
  name (const ::std::string&)
  {
  }

  void domainfinder_pskel::
  post_domainfinder ()
  {
  }
}

#include <cassert>

namespace dmd
{
  // Element validation and dispatch functions for domainmanagerconfiguration_pskel.
  //
  bool domainmanagerconfiguration_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns.empty())
          s = 0UL;
        else if (n == "domainmanagersoftpkg" &&
                 ns.empty())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &domainmanagerconfiguration_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "description",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool domainmanagerconfiguration_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void domainmanagerconfiguration_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void domainmanagerconfiguration_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "description");

    this->v_state_stack_.pop ();
  }

  void domainmanagerconfiguration_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->description_parser_;

            if (this->description_parser_)
              this->description_parser_->pre ();
          }
          else
          {
            if (this->description_parser_)
            {
              const ::std::string& tmp (this->description_parser_->post_string ());
              this->description (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "domainmanagersoftpkg" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->domainmanagersoftpkg_parser_;

            if (this->domainmanagersoftpkg_parser_)
              this->domainmanagersoftpkg_parser_->pre ();
          }
          else
          {
            if (this->domainmanagersoftpkg_parser_)
            {
              const ::std::string& tmp (this->domainmanagersoftpkg_parser_->post_domainmanagersoftpkg ());
              this->domainmanagersoftpkg (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "domainmanagersoftpkg",
              ns, n);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "services" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->services_parser_;

            if (this->services_parser_)
              this->services_parser_->pre ();
          }
          else
          {
            if (this->services_parser_)
            {
              this->services_parser_->post_services ();
              this->services ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for domainmanagersoftpkg_pskel.
  //
  bool domainmanagersoftpkg_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "localfile" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &domainmanagersoftpkg_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool domainmanagersoftpkg_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void domainmanagersoftpkg_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void domainmanagersoftpkg_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "localfile");

    this->v_state_stack_.pop ();
  }

  void domainmanagersoftpkg_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "localfile" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->localfile_parser_;

            if (this->localfile_parser_)
              this->localfile_parser_->pre ();
          }
          else
          {
            if (this->localfile_parser_)
            {
              const ::std::string& tmp (this->localfile_parser_->post_localfile ());
              this->localfile (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for services_pskel.
  //
  bool services_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "service" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &services_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "service",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool services_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void services_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void services_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "service");

    this->v_state_stack_.pop ();
  }

  void services_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "service" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->service_parser_;

            if (this->service_parser_)
              this->service_parser_->pre ();
          }
          else
          {
            if (this->service_parser_)
            {
              this->service_parser_->post_service ();
              this->service ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "service",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for service_pskel.
  //
  bool service_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "usesidentifier" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &service_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "usesidentifier",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool service_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void service_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void service_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "usesidentifier");

    this->v_state_stack_.pop ();
  }

  void service_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "usesidentifier" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->usesidentifier_parser_;

            if (this->usesidentifier_parser_)
              this->usesidentifier_parser_->pre ();
          }
          else
          {
            if (this->usesidentifier_parser_)
            {
              const ::std::string& tmp (this->usesidentifier_parser_->post_string ());
              this->usesidentifier (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "usesidentifier",
              ns, n);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "findby" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->findby_parser_;

            if (this->findby_parser_)
              this->findby_parser_->pre ();
          }
          else
          {
            if (this->findby_parser_)
            {
              this->findby_parser_->post_findby ();
              this->findby ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "findby",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for findby_pskel.
  //
  bool findby_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "namingservice" &&
            ns.empty())
          s = 0UL;
        else if (n == "stringifiedobjectref" &&
                 ns.empty())
          s = 1UL;
        else if (n == "domainfinder" &&
                 ns.empty())
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &findby_pskel::choice_0;
          vd->state = s;
          vd->count = 0;

          this->choice_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "namingservice",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool findby_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void findby_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void findby_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "namingservice");

    this->v_state_stack_.pop ();
  }

  void findby_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->namingservice_parser_;

          if (this->namingservice_parser_)
            this->namingservice_parser_->pre ();
        }
        else
        {
          if (this->namingservice_parser_)
          {
            this->namingservice_parser_->post_namingservice ();
            this->namingservice ();
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->stringifiedobjectref_parser_;

          if (this->stringifiedobjectref_parser_)
            this->stringifiedobjectref_parser_->pre ();
        }
        else
        {
          if (this->stringifiedobjectref_parser_)
          {
            const ::std::string& tmp (this->stringifiedobjectref_parser_->post_string ());
            this->stringifiedobjectref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 2UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->domainfinder_parser_;

          if (this->domainfinder_parser_)
            this->domainfinder_parser_->pre ();
        }
        else
        {
          if (this->domainfinder_parser_)
          {
            this->domainfinder_parser_->post_domainfinder ();
            this->domainfinder ();
          }

          state = ~0UL;
        }

        break;
      }
    }
  }
}

namespace dmd
{
  // Attribute validation and dispatch functions for domainmanagerconfiguration_pskel.
  //
  bool domainmanagerconfiguration_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();
        this->id_parser_->_pre_impl ();
        this->id_parser_->_characters (s);
        this->id_parser_->_post_impl ();
        const ::std::string& tmp (this->id_parser_->post_string ());
        this->id (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    return false;
  }

  void domainmanagerconfiguration_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.id = false;
    as.name = false;
  }

  void domainmanagerconfiguration_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.id)
      this->_expected_attribute (
        "", "id");
    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for localfile_pskel.
  //
  bool localfile_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    return false;
  }

  void localfile_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void localfile_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for namingservice_pskel.
  //
  bool namingservice_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        this->name_parser_->post_any_simple_type ();
        this->name ();
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    return false;
  }

  void namingservice_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void namingservice_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for domainfinder_pskel.
  //
  bool domainfinder_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_string ());
        this->type (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      return true;
    }

    return false;
  }

  void domainfinder_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.type = false;
  }

  void domainfinder_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.type)
      this->_expected_attribute (
        "", "type");

    this->v_state_attr_stack_.pop ();
  }
}

namespace dmd
{
}

// Begin epilogue.
//
//
// End epilogue.

