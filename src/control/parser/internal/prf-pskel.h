// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX______XML_XSD_PRF_PSKEL_H
#define CXX______XML_XSD_PRF_PSKEL_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace prf
{
  class Unit_pskel;
  class IsComplex_pskel;
  class AccessType_pskel;
  class action_pskel;
  class ActionType_pskel;
  class configurationKind_pskel;
  class enumeration_pskel;
  class enumerations_pskel;
  class inputValue_pskel;
  class kind_pskel;
  class PropertyConfigurationType_pskel;
  class StructPropertyConfigurationType_pskel;
  class properties_pskel;
  class PropertyValueType_pskel;
  class range_pskel;
  class resultValue_pskel;
  class simple_pskel;
  class simpleRef_pskel;
  class simpleSequence_pskel;
  class struct_pskel;
  class structSequence_pskel;
  class structValue_pskel;
  class test_pskel;
  class values_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/expat/elements.hxx>

#include "vector"
#include "utility"
#include "map"
#include "../../include/ossie/Properties.h"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Document type. See libxsd/xsd/cxx/parser/expat/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::expat::document< char > document;
}

namespace prf
{
  class Unit_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::std::string
    post_Unit ();
  };

  class IsComplex_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::std::string
    post_IsComplex ();
  };

  class AccessType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::std::string
    post_AccessType ();
  };

  class action_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    type (const ::std::string&);

    virtual ::std::string
    post_action () = 0;

    // Parser construction API.
    //
    void
    type_parser (::prf::ActionType_pskel&);

    void
    parsers (::prf::ActionType_pskel& /* type */);

    // Constructor.
    //
    action_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::prf::ActionType_pskel* type_parser_;
  };

  class ActionType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::std::string
    post_ActionType ();
  };

  class configurationKind_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    kindtype (const ::std::string&);

    virtual ::std::string
    post_configurationKind () = 0;

    // Parser construction API.
    //
    void
    kindtype_parser (::prf::StructPropertyConfigurationType_pskel&);

    void
    parsers (::prf::StructPropertyConfigurationType_pskel& /* kindtype */);

    // Constructor.
    //
    configurationKind_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::prf::StructPropertyConfigurationType_pskel* kindtype_parser_;
  };

  class enumeration_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    label (const ::std::string&);

    virtual void
    value (const ::std::string&);

    virtual ::std::map<std::string, std::string>::value_type
    post_enumeration () = 0;

    // Parser construction API.
    //
    void
    label_parser (::xml_schema::string_pskel&);

    void
    value_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* label */,
             ::xml_schema::string_pskel& /* value */);

    // Constructor.
    //
    enumeration_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* label_parser_;
    ::xml_schema::string_pskel* value_parser_;

    protected:
    struct v_state_attr_
    {
      bool label;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class enumerations_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    enumeration (const ::std::map<std::string, std::string>::value_type&);

    virtual ::std::map<std::string, std::string>
    post_enumerations () = 0;

    // Parser construction API.
    //
    void
    enumeration_parser (::prf::enumeration_pskel&);

    void
    parsers (::prf::enumeration_pskel& /* enumeration */);

    // Constructor.
    //
    enumerations_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::prf::enumeration_pskel* enumeration_parser_;

    protected:
    struct v_state_descr_
    {
      void (::prf::enumerations_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class inputValue_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    simple (ossie::SimpleProperty*);

    virtual void
    post_inputValue ();

    // Parser construction API.
    //
    void
    simple_parser (::prf::simple_pskel&);

    void
    parsers (::prf::simple_pskel& /* simple */);

    // Constructor.
    //
    inputValue_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::prf::simple_pskel* simple_parser_;

    protected:
    struct v_state_descr_
    {
      void (::prf::inputValue_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class kind_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    kindtype (const ::std::string&);

    virtual ::std::string
    post_kind () = 0;

    // Parser construction API.
    //
    void
    kindtype_parser (::prf::PropertyConfigurationType_pskel&);

    void
    parsers (::prf::PropertyConfigurationType_pskel& /* kindtype */);

    // Constructor.
    //
    kind_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::prf::PropertyConfigurationType_pskel* kindtype_parser_;
  };

  class PropertyConfigurationType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::std::string
    post_PropertyConfigurationType ();
  };

  class StructPropertyConfigurationType_pskel: public virtual ::prf::PropertyConfigurationType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::std::string
    post_StructPropertyConfigurationType ();
  };

  class properties_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    description (const ::std::string&);

    virtual void
    simple (ossie::SimpleProperty*);

    virtual void
    simplesequence (ossie::SimpleSequenceProperty*);

    virtual void
    test ();

    virtual void
    struct_ (ossie::StructProperty*);

    virtual void
    structsequence (ossie::StructSequenceProperty*);

    virtual std::auto_ptr<ossie::PRF>
    post_properties () = 0;

    // Parser construction API.
    //
    void
    description_parser (::xml_schema::string_pskel&);

    void
    simple_parser (::prf::simple_pskel&);

    void
    simplesequence_parser (::prf::simpleSequence_pskel&);

    void
    test_parser (::prf::test_pskel&);

    void
    struct_parser (::prf::struct_pskel&);

    void
    structsequence_parser (::prf::structSequence_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* description */,
             ::prf::simple_pskel& /* simple */,
             ::prf::simpleSequence_pskel& /* simplesequence */,
             ::prf::test_pskel& /* test */,
             ::prf::struct_pskel& /* struct */,
             ::prf::structSequence_pskel& /* structsequence */);

    // Constructor.
    //
    properties_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* description_parser_;
    ::prf::simple_pskel* simple_parser_;
    ::prf::simpleSequence_pskel* simplesequence_parser_;
    ::prf::test_pskel* test_parser_;
    ::prf::struct_pskel* struct__parser_;
    ::prf::structSequence_pskel* structsequence_parser_;

    protected:
    struct v_state_descr_
    {
      void (::prf::properties_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class PropertyValueType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual ::std::string
    post_PropertyValueType ();
  };

  class range_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    max (const ::std::string&);

    virtual void
    min (const ::std::string&);

    virtual ::std::pair<std::string, std::string>
    post_range () = 0;

    // Parser construction API.
    //
    void
    max_parser (::xml_schema::string_pskel&);

    void
    min_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* max */,
             ::xml_schema::string_pskel& /* min */);

    // Constructor.
    //
    range_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* max_parser_;
    ::xml_schema::string_pskel* min_parser_;

    protected:
    struct v_state_attr_
    {
      bool max;
      bool min;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class resultValue_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    simple (ossie::SimpleProperty*);

    virtual void
    post_resultValue ();

    // Parser construction API.
    //
    void
    simple_parser (::prf::simple_pskel&);

    void
    parsers (::prf::simple_pskel& /* simple */);

    // Constructor.
    //
    resultValue_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::prf::simple_pskel* simple_parser_;

    protected:
    struct v_state_descr_
    {
      void (::prf::resultValue_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class simple_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    description (const ::std::string&);

    virtual void
    value (const ::std::string&);

    virtual void
    units (const ::std::string&);

    virtual void
    range (const ::std::pair<std::string, std::string>&);

    virtual void
    enumerations (const ::std::map<std::string, std::string>&);

    virtual void
    kind (const ::std::string&);

    virtual void
    action (const ::std::string&);

    virtual void
    id (const ::std::string&);

    virtual void
    mode (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    complex (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual ossie::SimpleProperty*
    post_simple () = 0;

    // Parser construction API.
    //
    void
    description_parser (::xml_schema::string_pskel&);

    void
    value_parser (::xml_schema::string_pskel&);

    void
    units_parser (::prf::Unit_pskel&);

    void
    range_parser (::prf::range_pskel&);

    void
    enumerations_parser (::prf::enumerations_pskel&);

    void
    kind_parser (::prf::kind_pskel&);

    void
    action_parser (::prf::action_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    mode_parser (::prf::AccessType_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    complex_parser (::prf::IsComplex_pskel&);

    void
    type_parser (::prf::PropertyValueType_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* description */,
             ::xml_schema::string_pskel& /* value */,
             ::prf::Unit_pskel& /* units */,
             ::prf::range_pskel& /* range */,
             ::prf::enumerations_pskel& /* enumerations */,
             ::prf::kind_pskel& /* kind */,
             ::prf::action_pskel& /* action */,
             ::xml_schema::string_pskel& /* id */,
             ::prf::AccessType_pskel& /* mode */,
             ::xml_schema::string_pskel& /* name */,
             ::prf::IsComplex_pskel& /* complex */,
             ::prf::PropertyValueType_pskel& /* type */);

    // Constructor.
    //
    simple_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* description_parser_;
    ::xml_schema::string_pskel* value_parser_;
    ::prf::Unit_pskel* units_parser_;
    ::prf::range_pskel* range_parser_;
    ::prf::enumerations_pskel* enumerations_parser_;
    ::prf::kind_pskel* kind_parser_;
    ::prf::action_pskel* action_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::prf::AccessType_pskel* mode_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::prf::IsComplex_pskel* complex_parser_;
    ::prf::PropertyValueType_pskel* type_parser_;

    protected:
    struct v_state_descr_
    {
      void (::prf::simple_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
      bool type;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class simpleRef_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    refid (const ::std::string&);

    virtual void
    value (const ::std::string&);

    virtual ::std::map<std::string, std::string>::value_type
    post_simpleRef () = 0;

    // Parser construction API.
    //
    void
    refid_parser (::xml_schema::string_pskel&);

    void
    value_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* refid */,
             ::xml_schema::string_pskel& /* value */);

    // Constructor.
    //
    simpleRef_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* refid_parser_;
    ::xml_schema::string_pskel* value_parser_;

    protected:
    struct v_state_attr_
    {
      bool refid;
      bool value;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class simpleSequence_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    description (const ::std::string&);

    virtual void
    values (const ::std::vector<std::string>&);

    virtual void
    units (const ::std::string&);

    virtual void
    range (const ::std::pair<std::string, std::string>&);

    virtual void
    kind (const ::std::string&);

    virtual void
    action (const ::std::string&);

    virtual void
    id (const ::std::string&);

    virtual void
    mode (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    complex (const ::std::string&);

    virtual ossie::SimpleSequenceProperty*
    post_simpleSequence () = 0;

    // Parser construction API.
    //
    void
    description_parser (::xml_schema::string_pskel&);

    void
    values_parser (::prf::values_pskel&);

    void
    units_parser (::prf::Unit_pskel&);

    void
    range_parser (::prf::range_pskel&);

    void
    kind_parser (::prf::kind_pskel&);

    void
    action_parser (::prf::action_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    mode_parser (::prf::AccessType_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    type_parser (::prf::PropertyValueType_pskel&);

    void
    complex_parser (::prf::IsComplex_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* description */,
             ::prf::values_pskel& /* values */,
             ::prf::Unit_pskel& /* units */,
             ::prf::range_pskel& /* range */,
             ::prf::kind_pskel& /* kind */,
             ::prf::action_pskel& /* action */,
             ::xml_schema::string_pskel& /* id */,
             ::prf::AccessType_pskel& /* mode */,
             ::xml_schema::string_pskel& /* name */,
             ::prf::PropertyValueType_pskel& /* type */,
             ::prf::IsComplex_pskel& /* complex */);

    // Constructor.
    //
    simpleSequence_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* description_parser_;
    ::prf::values_pskel* values_parser_;
    ::prf::Unit_pskel* units_parser_;
    ::prf::range_pskel* range_parser_;
    ::prf::kind_pskel* kind_parser_;
    ::prf::action_pskel* action_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::prf::AccessType_pskel* mode_parser_;
    ::xml_schema::string_pskel* name_parser_;
    ::prf::PropertyValueType_pskel* type_parser_;
    ::prf::IsComplex_pskel* complex_parser_;

    protected:
    struct v_state_descr_
    {
      void (::prf::simpleSequence_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
      bool type;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class struct_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    description (const ::std::string&);

    virtual void
    simple (ossie::SimpleProperty*);

    virtual void
    configurationkind (const ::std::string&);

    virtual void
    id (const ::std::string&);

    virtual void
    mode (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual ossie::StructProperty*
    post_struct () = 0;

    // Parser construction API.
    //
    void
    description_parser (::xml_schema::string_pskel&);

    void
    simple_parser (::prf::simple_pskel&);

    void
    configurationkind_parser (::prf::configurationKind_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    mode_parser (::prf::AccessType_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* description */,
             ::prf::simple_pskel& /* simple */,
             ::prf::configurationKind_pskel& /* configurationkind */,
             ::xml_schema::string_pskel& /* id */,
             ::prf::AccessType_pskel& /* mode */,
             ::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    struct_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* description_parser_;
    ::prf::simple_pskel* simple_parser_;
    ::prf::configurationKind_pskel* configurationkind_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::prf::AccessType_pskel* mode_parser_;
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_descr_
    {
      void (::prf::struct_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class structSequence_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    description (const ::std::string&);

    virtual void
    struct_ (ossie::StructProperty*);

    virtual void
    structvalue (const ::std::map<std::string, std::string>&);

    virtual void
    configurationkind (const ::std::string&);

    virtual void
    id (const ::std::string&);

    virtual void
    mode (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual ossie::StructSequenceProperty*
    post_structSequence () = 0;

    // Parser construction API.
    //
    void
    description_parser (::xml_schema::string_pskel&);

    void
    struct_parser (::prf::struct_pskel&);

    void
    structvalue_parser (::prf::structValue_pskel&);

    void
    configurationkind_parser (::prf::configurationKind_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    mode_parser (::prf::AccessType_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* description */,
             ::prf::struct_pskel& /* struct */,
             ::prf::structValue_pskel& /* structvalue */,
             ::prf::configurationKind_pskel& /* configurationkind */,
             ::xml_schema::string_pskel& /* id */,
             ::prf::AccessType_pskel& /* mode */,
             ::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    structSequence_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* description_parser_;
    ::prf::struct_pskel* struct__parser_;
    ::prf::structValue_pskel* structvalue_parser_;
    ::prf::configurationKind_pskel* configurationkind_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::prf::AccessType_pskel* mode_parser_;
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_descr_
    {
      void (::prf::structSequence_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class structValue_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    simpleref (const ::std::map<std::string, std::string>::value_type&);

    virtual ::std::map<std::string, std::string>
    post_structValue () = 0;

    // Parser construction API.
    //
    void
    simpleref_parser (::prf::simpleRef_pskel&);

    void
    parsers (::prf::simpleRef_pskel& /* simpleref */);

    // Constructor.
    //
    structValue_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::prf::simpleRef_pskel* simpleref_parser_;

    protected:
    struct v_state_descr_
    {
      void (::prf::structValue_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class test_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    description (const ::std::string&);

    virtual void
    inputvalue ();

    virtual void
    resultvalue ();

    virtual void
    id (const ::std::string&);

    virtual void
    post_test ();

    // Parser construction API.
    //
    void
    description_parser (::xml_schema::string_pskel&);

    void
    inputvalue_parser (::prf::inputValue_pskel&);

    void
    resultvalue_parser (::prf::resultValue_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* description */,
             ::prf::inputValue_pskel& /* inputvalue */,
             ::prf::resultValue_pskel& /* resultvalue */,
             ::xml_schema::string_pskel& /* id */);

    // Constructor.
    //
    test_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* description_parser_;
    ::prf::inputValue_pskel* inputvalue_parser_;
    ::prf::resultValue_pskel* resultvalue_parser_;
    ::xml_schema::string_pskel* id_parser_;

    protected:
    struct v_state_descr_
    {
      void (::prf::test_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class values_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    value (const ::std::string&);

    virtual ::std::vector<std::string>
    post_values () = 0;

    // Parser construction API.
    //
    void
    value_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* value */);

    // Constructor.
    //
    values_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* value_parser_;

    protected:
    struct v_state_descr_
    {
      void (::prf::values_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX______XML_XSD_PRF_PSKEL_H
