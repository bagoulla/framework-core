// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "scd-pskel.h"

namespace scd
{
  // softwarecomponent_pskel
  //

  void softwarecomponent_pskel::
  corbaversion_parser (::xml_schema::string_pskel& p)
  {
    this->corbaversion_parser_ = &p;
  }

  void softwarecomponent_pskel::
  componentrepid_parser (::scd::componentRepId_pskel& p)
  {
    this->componentrepid_parser_ = &p;
  }

  void softwarecomponent_pskel::
  componenttype_parser (::xml_schema::string_pskel& p)
  {
    this->componenttype_parser_ = &p;
  }

  void softwarecomponent_pskel::
  componentfeatures_parser (::scd::componentFeatures_pskel& p)
  {
    this->componentfeatures_parser_ = &p;
  }

  void softwarecomponent_pskel::
  interfaces_parser (::scd::interfaces_pskel& p)
  {
    this->interfaces_parser_ = &p;
  }

  void softwarecomponent_pskel::
  propertyfile_parser (::scd::propertyFile_pskel& p)
  {
    this->propertyfile_parser_ = &p;
  }

  void softwarecomponent_pskel::
  parsers (::xml_schema::string_pskel& corbaversion,
           ::scd::componentRepId_pskel& componentrepid,
           ::xml_schema::string_pskel& componenttype,
           ::scd::componentFeatures_pskel& componentfeatures,
           ::scd::interfaces_pskel& interfaces,
           ::scd::propertyFile_pskel& propertyfile)
  {
    this->corbaversion_parser_ = &corbaversion;
    this->componentrepid_parser_ = &componentrepid;
    this->componenttype_parser_ = &componenttype;
    this->componentfeatures_parser_ = &componentfeatures;
    this->interfaces_parser_ = &interfaces;
    this->propertyfile_parser_ = &propertyfile;
  }

  softwarecomponent_pskel::
  softwarecomponent_pskel ()
  : corbaversion_parser_ (0),
    componentrepid_parser_ (0),
    componenttype_parser_ (0),
    componentfeatures_parser_ (0),
    interfaces_parser_ (0),
    propertyfile_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // propertyFile_pskel
  //

  void propertyFile_pskel::
  localfile_parser (::scd::localFile_pskel& p)
  {
    this->localfile_parser_ = &p;
  }

  void propertyFile_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void propertyFile_pskel::
  parsers (::scd::localFile_pskel& localfile,
           ::xml_schema::string_pskel& type)
  {
    this->localfile_parser_ = &localfile;
    this->type_parser_ = &type;
  }

  propertyFile_pskel::
  propertyFile_pskel ()
  : localfile_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // localFile_pskel
  //

  void localFile_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void localFile_pskel::
  parsers (::xml_schema::string_pskel& name)
  {
    this->name_parser_ = &name;
  }

  localFile_pskel::
  localFile_pskel ()
  : name_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // componentRepId_pskel
  //

  void componentRepId_pskel::
  repid_parser (::xml_schema::string_pskel& p)
  {
    this->repid_parser_ = &p;
  }

  void componentRepId_pskel::
  parsers (::xml_schema::string_pskel& repid)
  {
    this->repid_parser_ = &repid;
  }

  componentRepId_pskel::
  componentRepId_pskel ()
  : repid_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // componentFeatures_pskel
  //

  void componentFeatures_pskel::
  supportsinterface_parser (::scd::supportsInterface_pskel& p)
  {
    this->supportsinterface_parser_ = &p;
  }

  void componentFeatures_pskel::
  ports_parser (::scd::ports_pskel& p)
  {
    this->ports_parser_ = &p;
  }

  void componentFeatures_pskel::
  parsers (::scd::supportsInterface_pskel& supportsinterface,
           ::scd::ports_pskel& ports)
  {
    this->supportsinterface_parser_ = &supportsinterface;
    this->ports_parser_ = &ports;
  }

  componentFeatures_pskel::
  componentFeatures_pskel ()
  : supportsinterface_parser_ (0),
    ports_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // supportsInterface_pskel
  //

  void supportsInterface_pskel::
  repid_parser (::xml_schema::string_pskel& p)
  {
    this->repid_parser_ = &p;
  }

  void supportsInterface_pskel::
  supportsname_parser (::xml_schema::string_pskel& p)
  {
    this->supportsname_parser_ = &p;
  }

  void supportsInterface_pskel::
  parsers (::xml_schema::string_pskel& repid,
           ::xml_schema::string_pskel& supportsname)
  {
    this->repid_parser_ = &repid;
    this->supportsname_parser_ = &supportsname;
  }

  supportsInterface_pskel::
  supportsInterface_pskel ()
  : repid_parser_ (0),
    supportsname_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // ports_pskel
  //

  void ports_pskel::
  provides_parser (::scd::provides_pskel& p)
  {
    this->provides_parser_ = &p;
  }

  void ports_pskel::
  uses_parser (::scd::uses_pskel& p)
  {
    this->uses_parser_ = &p;
  }

  void ports_pskel::
  parsers (::scd::provides_pskel& provides,
           ::scd::uses_pskel& uses)
  {
    this->provides_parser_ = &provides;
    this->uses_parser_ = &uses;
  }

  ports_pskel::
  ports_pskel ()
  : provides_parser_ (0),
    uses_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // provides_pskel
  //

  void provides_pskel::
  porttype_parser (::scd::portType_pskel& p)
  {
    this->porttype_parser_ = &p;
  }

  void provides_pskel::
  repid_parser (::xml_schema::string_pskel& p)
  {
    this->repid_parser_ = &p;
  }

  void provides_pskel::
  providesname_parser (::xml_schema::string_pskel& p)
  {
    this->providesname_parser_ = &p;
  }

  void provides_pskel::
  parsers (::scd::portType_pskel& porttype,
           ::xml_schema::string_pskel& repid,
           ::xml_schema::string_pskel& providesname)
  {
    this->porttype_parser_ = &porttype;
    this->repid_parser_ = &repid;
    this->providesname_parser_ = &providesname;
  }

  provides_pskel::
  provides_pskel ()
  : porttype_parser_ (0),
    repid_parser_ (0),
    providesname_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // uses_pskel
  //

  void uses_pskel::
  porttype_parser (::scd::portType_pskel& p)
  {
    this->porttype_parser_ = &p;
  }

  void uses_pskel::
  repid_parser (::xml_schema::string_pskel& p)
  {
    this->repid_parser_ = &p;
  }

  void uses_pskel::
  usesname_parser (::xml_schema::string_pskel& p)
  {
    this->usesname_parser_ = &p;
  }

  void uses_pskel::
  parsers (::scd::portType_pskel& porttype,
           ::xml_schema::string_pskel& repid,
           ::xml_schema::string_pskel& usesname)
  {
    this->porttype_parser_ = &porttype;
    this->repid_parser_ = &repid;
    this->usesname_parser_ = &usesname;
  }

  uses_pskel::
  uses_pskel ()
  : porttype_parser_ (0),
    repid_parser_ (0),
    usesname_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // portType_pskel
  //

  void portType_pskel::
  type_parser (::scd::type_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void portType_pskel::
  parsers (::scd::type_pskel& type)
  {
    this->type_parser_ = &type;
  }

  portType_pskel::
  portType_pskel ()
  : type_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // interfaces_pskel
  //

  void interfaces_pskel::
  interface_parser (::scd::interface_pskel& p)
  {
    this->interface_parser_ = &p;
  }

  void interfaces_pskel::
  parsers (::scd::interface_pskel& interface)
  {
    this->interface_parser_ = &interface;
  }

  interfaces_pskel::
  interfaces_pskel ()
  : interface_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // interface_pskel
  //

  void interface_pskel::
  inheritsinterface_parser (::scd::inheritsInterface_pskel& p)
  {
    this->inheritsinterface_parser_ = &p;
  }

  void interface_pskel::
  repid_parser (::xml_schema::string_pskel& p)
  {
    this->repid_parser_ = &p;
  }

  void interface_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void interface_pskel::
  parsers (::scd::inheritsInterface_pskel& inheritsinterface,
           ::xml_schema::string_pskel& repid,
           ::xml_schema::string_pskel& name)
  {
    this->inheritsinterface_parser_ = &inheritsinterface;
    this->repid_parser_ = &repid;
    this->name_parser_ = &name;
  }

  interface_pskel::
  interface_pskel ()
  : inheritsinterface_parser_ (0),
    repid_parser_ (0),
    name_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // inheritsInterface_pskel
  //

  void inheritsInterface_pskel::
  repid_parser (::xml_schema::string_pskel& p)
  {
    this->repid_parser_ = &p;
  }

  void inheritsInterface_pskel::
  parsers (::xml_schema::string_pskel& repid)
  {
    this->repid_parser_ = &repid;
  }

  inheritsInterface_pskel::
  inheritsInterface_pskel ()
  : repid_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }
}

namespace scd
{
  // softwarecomponent_pskel
  //

  void softwarecomponent_pskel::
  corbaversion (const ::std::string&)
  {
  }

  void softwarecomponent_pskel::
  componentrepid ()
  {
  }

  void softwarecomponent_pskel::
  componenttype (const ::std::string&)
  {
  }

  void softwarecomponent_pskel::
  componentfeatures ()
  {
  }

  void softwarecomponent_pskel::
  interfaces ()
  {
  }

  void softwarecomponent_pskel::
  propertyfile ()
  {
  }

  // propertyFile_pskel
  //

  void propertyFile_pskel::
  localfile ()
  {
  }

  void propertyFile_pskel::
  type (const ::std::string&)
  {
  }

  void propertyFile_pskel::
  post_propertyFile ()
  {
  }

  // localFile_pskel
  //

  void localFile_pskel::
  name (const ::std::string&)
  {
  }

  void localFile_pskel::
  post_localFile ()
  {
  }

  // componentRepId_pskel
  //

  void componentRepId_pskel::
  repid (const ::std::string&)
  {
  }

  void componentRepId_pskel::
  post_componentRepId ()
  {
  }

  // componentFeatures_pskel
  //

  void componentFeatures_pskel::
  supportsinterface ()
  {
  }

  void componentFeatures_pskel::
  ports ()
  {
  }

  void componentFeatures_pskel::
  post_componentFeatures ()
  {
  }

  // supportsInterface_pskel
  //

  void supportsInterface_pskel::
  repid (const ::std::string&)
  {
  }

  void supportsInterface_pskel::
  supportsname (const ::std::string&)
  {
  }

  void supportsInterface_pskel::
  post_supportsInterface ()
  {
  }

  // ports_pskel
  //

  void ports_pskel::
  provides ()
  {
  }

  void ports_pskel::
  uses ()
  {
  }

  void ports_pskel::
  post_ports ()
  {
  }

  // provides_pskel
  //

  void provides_pskel::
  porttype ()
  {
  }

  void provides_pskel::
  repid (const ::std::string&)
  {
  }

  void provides_pskel::
  providesname (const ::std::string&)
  {
  }

  void provides_pskel::
  post_provides ()
  {
  }

  // uses_pskel
  //

  void uses_pskel::
  porttype ()
  {
  }

  void uses_pskel::
  repid (const ::std::string&)
  {
  }

  void uses_pskel::
  usesname (const ::std::string&)
  {
  }

  void uses_pskel::
  post_uses ()
  {
  }

  // portType_pskel
  //

  void portType_pskel::
  type ()
  {
  }

  void portType_pskel::
  post_portType ()
  {
  }

  // interfaces_pskel
  //

  void interfaces_pskel::
  interface ()
  {
  }

  void interfaces_pskel::
  post_interfaces ()
  {
  }

  // interface_pskel
  //

  void interface_pskel::
  inheritsinterface ()
  {
  }

  void interface_pskel::
  repid (const ::std::string&)
  {
  }

  void interface_pskel::
  name (const ::std::string&)
  {
  }

  void interface_pskel::
  post_interface ()
  {
  }

  // inheritsInterface_pskel
  //

  void inheritsInterface_pskel::
  repid (const ::std::string&)
  {
  }

  void inheritsInterface_pskel::
  post_inheritsInterface ()
  {
  }

  // type_pskel
  //

  void type_pskel::
  post_type ()
  {
  }
}

#include <cassert>

namespace scd
{
  // Element validation and dispatch functions for softwarecomponent_pskel.
  //
  bool softwarecomponent_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "corbaversion" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &softwarecomponent_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "corbaversion",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool softwarecomponent_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void softwarecomponent_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void softwarecomponent_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "corbaversion");

    this->v_state_stack_.pop ();
  }

  void softwarecomponent_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "corbaversion" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->corbaversion_parser_;

            if (this->corbaversion_parser_)
              this->corbaversion_parser_->pre ();
          }
          else
          {
            if (this->corbaversion_parser_)
            {
              const ::std::string& tmp (this->corbaversion_parser_->post_string ());
              this->corbaversion (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "corbaversion",
              ns, n);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "componentrepid" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->componentrepid_parser_;

            if (this->componentrepid_parser_)
              this->componentrepid_parser_->pre ();
          }
          else
          {
            if (this->componentrepid_parser_)
            {
              this->componentrepid_parser_->post_componentRepId ();
              this->componentrepid ();
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "componentrepid",
              ns, n);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "componenttype" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->componenttype_parser_;

            if (this->componenttype_parser_)
              this->componenttype_parser_->pre ();
          }
          else
          {
            if (this->componenttype_parser_)
            {
              const ::std::string& tmp (this->componenttype_parser_->post_string ());
              this->componenttype (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "componenttype",
              ns, n);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "componentfeatures" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->componentfeatures_parser_;

            if (this->componentfeatures_parser_)
              this->componentfeatures_parser_->pre ();
          }
          else
          {
            if (this->componentfeatures_parser_)
            {
              this->componentfeatures_parser_->post_componentFeatures ();
              this->componentfeatures ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "componentfeatures",
              ns, n);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "interfaces" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->interfaces_parser_;

            if (this->interfaces_parser_)
              this->interfaces_parser_->pre ();
          }
          else
          {
            if (this->interfaces_parser_)
            {
              this->interfaces_parser_->post_interfaces ();
              this->interfaces ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "interfaces",
              ns, n);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "propertyfile" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->propertyfile_parser_;

            if (this->propertyfile_parser_)
              this->propertyfile_parser_->pre ();
          }
          else
          {
            if (this->propertyfile_parser_)
            {
              this->propertyfile_parser_->post_propertyFile ();
              this->propertyfile ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for propertyFile_pskel.
  //
  bool propertyFile_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "localfile" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &propertyFile_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool propertyFile_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void propertyFile_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void propertyFile_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "localfile");

    this->v_state_stack_.pop ();
  }

  void propertyFile_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "localfile" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->localfile_parser_;

            if (this->localfile_parser_)
              this->localfile_parser_->pre ();
          }
          else
          {
            if (this->localfile_parser_)
            {
              this->localfile_parser_->post_localFile ();
              this->localfile ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for componentFeatures_pskel.
  //
  bool componentFeatures_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "supportsinterface" && ns.empty ())
          s = 0UL;
        else if (n == "ports" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &componentFeatures_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "supportsinterface",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool componentFeatures_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void componentFeatures_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void componentFeatures_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "supportsinterface");

    this->v_state_stack_.pop ();
  }

  void componentFeatures_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "supportsinterface" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->supportsinterface_parser_;

            if (this->supportsinterface_parser_)
              this->supportsinterface_parser_->pre ();
          }
          else
          {
            if (this->supportsinterface_parser_)
            {
              this->supportsinterface_parser_->post_supportsInterface ();
              this->supportsinterface ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "ports" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->ports_parser_;

            if (this->ports_parser_)
              this->ports_parser_->pre ();
          }
          else
          {
            if (this->ports_parser_)
            {
              this->ports_parser_->post_ports ();
              this->ports ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "ports",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for ports_pskel.
  //
  bool ports_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "provides" && ns.empty ())
          s = 0UL;
        else if (n == "uses" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;

          vd = vs.data + vs.size++;
          vd->func = &ports_pskel::choice_0;
          vd->state = s;
          vd->count = 0;

          this->choice_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool ports_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void ports_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void ports_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void ports_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->provides_parser_;

          if (this->provides_parser_)
            this->provides_parser_->pre ();
        }
        else
        {
          if (this->provides_parser_)
          {
            this->provides_parser_->post_provides ();
            this->provides ();
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->uses_parser_;

          if (this->uses_parser_)
            this->uses_parser_->pre ();
        }
        else
        {
          if (this->uses_parser_)
          {
            this->uses_parser_->post_uses ();
            this->uses ();
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for provides_pskel.
  //
  bool provides_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "porttype" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &provides_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool provides_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void provides_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void provides_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void provides_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "porttype" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->porttype_parser_;

            if (this->porttype_parser_)
              this->porttype_parser_->pre ();
          }
          else
          {
            if (this->porttype_parser_)
            {
              this->porttype_parser_->post_portType ();
              this->porttype ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for uses_pskel.
  //
  bool uses_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "porttype" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &uses_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool uses_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void uses_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void uses_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void uses_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "porttype" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->porttype_parser_;

            if (this->porttype_parser_)
              this->porttype_parser_->pre ();
          }
          else
          {
            if (this->porttype_parser_)
            {
              this->porttype_parser_->post_portType ();
              this->porttype ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for interfaces_pskel.
  //
  bool interfaces_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "interface" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &interfaces_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "interface",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool interfaces_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void interfaces_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void interfaces_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "interface");

    this->v_state_stack_.pop ();
  }

  void interfaces_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "interface" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->interface_parser_;

            if (this->interface_parser_)
              this->interface_parser_->pre ();
          }
          else
          {
            if (this->interface_parser_)
            {
              this->interface_parser_->post_interface ();
              this->interface ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "interface",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for interface_pskel.
  //
  bool interface_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "inheritsinterface" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &interface_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool interface_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void interface_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void interface_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void interface_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "inheritsinterface" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->inheritsinterface_parser_;

            if (this->inheritsinterface_parser_)
              this->inheritsinterface_parser_->pre ();
          }
          else
          {
            if (this->inheritsinterface_parser_)
            {
              this->inheritsinterface_parser_->post_inheritsInterface ();
              this->inheritsinterface ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace scd
{
  // Attribute validation and dispatch functions for propertyFile_pskel.
  //
  bool propertyFile_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_string ());
        this->type (tmp);
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for localFile_pskel.
  //
  bool localFile_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    return false;
  }

  void localFile_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void localFile_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for componentRepId_pskel.
  //
  bool componentRepId_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "repid" && ns.empty ())
    {
      if (this->repid_parser_)
      {
        this->repid_parser_->pre ();
        this->repid_parser_->_pre_impl ();
        this->repid_parser_->_characters (s);
        this->repid_parser_->_post_impl ();
        const ::std::string& tmp (this->repid_parser_->post_string ());
        this->repid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->repid = true;
      return true;
    }

    return false;
  }

  void componentRepId_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.repid = false;
  }

  void componentRepId_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.repid)
      this->_expected_attribute (
        "", "repid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for supportsInterface_pskel.
  //
  bool supportsInterface_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "repid" && ns.empty ())
    {
      if (this->repid_parser_)
      {
        this->repid_parser_->pre ();
        this->repid_parser_->_pre_impl ();
        this->repid_parser_->_characters (s);
        this->repid_parser_->_post_impl ();
        const ::std::string& tmp (this->repid_parser_->post_string ());
        this->repid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->repid = true;
      return true;
    }

    if (n == "supportsname" && ns.empty ())
    {
      if (this->supportsname_parser_)
      {
        this->supportsname_parser_->pre ();
        this->supportsname_parser_->_pre_impl ();
        this->supportsname_parser_->_characters (s);
        this->supportsname_parser_->_post_impl ();
        const ::std::string& tmp (this->supportsname_parser_->post_string ());
        this->supportsname (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->supportsname = true;
      return true;
    }

    return false;
  }

  void supportsInterface_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.repid = false;
    as.supportsname = false;
  }

  void supportsInterface_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.repid)
      this->_expected_attribute (
        "", "repid");
    if (!as.supportsname)
      this->_expected_attribute (
        "", "supportsname");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for provides_pskel.
  //
  bool provides_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "repid" && ns.empty ())
    {
      if (this->repid_parser_)
      {
        this->repid_parser_->pre ();
        this->repid_parser_->_pre_impl ();
        this->repid_parser_->_characters (s);
        this->repid_parser_->_post_impl ();
        const ::std::string& tmp (this->repid_parser_->post_string ());
        this->repid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->repid = true;
      return true;
    }

    if (n == "providesname" && ns.empty ())
    {
      if (this->providesname_parser_)
      {
        this->providesname_parser_->pre ();
        this->providesname_parser_->_pre_impl ();
        this->providesname_parser_->_characters (s);
        this->providesname_parser_->_post_impl ();
        const ::std::string& tmp (this->providesname_parser_->post_string ());
        this->providesname (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->providesname = true;
      return true;
    }

    return false;
  }

  void provides_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.repid = false;
    as.providesname = false;
  }

  void provides_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.repid)
      this->_expected_attribute (
        "", "repid");
    if (!as.providesname)
      this->_expected_attribute (
        "", "providesname");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for uses_pskel.
  //
  bool uses_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "repid" && ns.empty ())
    {
      if (this->repid_parser_)
      {
        this->repid_parser_->pre ();
        this->repid_parser_->_pre_impl ();
        this->repid_parser_->_characters (s);
        this->repid_parser_->_post_impl ();
        const ::std::string& tmp (this->repid_parser_->post_string ());
        this->repid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->repid = true;
      return true;
    }

    if (n == "usesname" && ns.empty ())
    {
      if (this->usesname_parser_)
      {
        this->usesname_parser_->pre ();
        this->usesname_parser_->_pre_impl ();
        this->usesname_parser_->_characters (s);
        this->usesname_parser_->_post_impl ();
        const ::std::string& tmp (this->usesname_parser_->post_string ());
        this->usesname (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->usesname = true;
      return true;
    }

    return false;
  }

  void uses_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.repid = false;
    as.usesname = false;
  }

  void uses_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.repid)
      this->_expected_attribute (
        "", "repid");
    if (!as.usesname)
      this->_expected_attribute (
        "", "usesname");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for portType_pskel.
  //
  bool portType_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        this->type_parser_->post_type ();
        this->type ();
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
      return true;
    }

    return false;
  }

  void portType_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.type = false;
  }

  void portType_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.type)
      this->_expected_attribute (
        "", "type");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for interface_pskel.
  //
  bool interface_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "repid" && ns.empty ())
    {
      if (this->repid_parser_)
      {
        this->repid_parser_->pre ();
        this->repid_parser_->_pre_impl ();
        this->repid_parser_->_characters (s);
        this->repid_parser_->_post_impl ();
        const ::std::string& tmp (this->repid_parser_->post_string ());
        this->repid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->repid = true;
      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    return false;
  }

  void interface_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.repid = false;
    as.name = false;
  }

  void interface_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.repid)
      this->_expected_attribute (
        "", "repid");
    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for inheritsInterface_pskel.
  //
  bool inheritsInterface_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "repid" && ns.empty ())
    {
      if (this->repid_parser_)
      {
        this->repid_parser_->pre ();
        this->repid_parser_->_pre_impl ();
        this->repid_parser_->_characters (s);
        this->repid_parser_->_post_impl ();
        const ::std::string& tmp (this->repid_parser_->post_string ());
        this->repid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->repid = true;
      return true;
    }

    return false;
  }

  void inheritsInterface_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.repid = false;
  }

  void inheritsInterface_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.repid)
      this->_expected_attribute (
        "", "repid");

    this->v_state_attr_stack_.pop ();
  }
}

namespace scd
{
}

// Begin epilogue.
//
//
// End epilogue.

