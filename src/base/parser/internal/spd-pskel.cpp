// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "spd-pskel.h"

namespace spd
{
  // softPkg_pskel
  //

  void softPkg_pskel::
  title_parser (::xml_schema::string_pskel& p)
  {
    this->title_parser_ = &p;
  }

  void softPkg_pskel::
  author_parser (::spd::author_pskel& p)
  {
    this->author_parser_ = &p;
  }

  void softPkg_pskel::
  description_parser (::xml_schema::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void softPkg_pskel::
  propertyfile_parser (::spd::propertyFile_pskel& p)
  {
    this->propertyfile_parser_ = &p;
  }

  void softPkg_pskel::
  descriptor_parser (::spd::descriptor_pskel& p)
  {
    this->descriptor_parser_ = &p;
  }

  void softPkg_pskel::
  implementation_parser (::spd::implementation_pskel& p)
  {
    this->implementation_parser_ = &p;
  }

  void softPkg_pskel::
  usesdevice_parser (::spd::usesDevice_pskel& p)
  {
    this->usesdevice_parser_ = &p;
  }

  void softPkg_pskel::
  id_parser (::xml_schema::string_pskel& p)
  {
    this->id_parser_ = &p;
  }

  void softPkg_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void softPkg_pskel::
  type_parser (::spd::scaComplianceType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void softPkg_pskel::
  version_parser (::xml_schema::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void softPkg_pskel::
  parsers (::xml_schema::string_pskel& title,
           ::spd::author_pskel& author,
           ::xml_schema::string_pskel& description,
           ::spd::propertyFile_pskel& propertyfile,
           ::spd::descriptor_pskel& descriptor,
           ::spd::implementation_pskel& implementation,
           ::spd::usesDevice_pskel& usesdevice,
           ::xml_schema::string_pskel& id,
           ::xml_schema::string_pskel& name,
           ::spd::scaComplianceType_pskel& type,
           ::xml_schema::string_pskel& version)
  {
    this->title_parser_ = &title;
    this->author_parser_ = &author;
    this->description_parser_ = &description;
    this->propertyfile_parser_ = &propertyfile;
    this->descriptor_parser_ = &descriptor;
    this->implementation_parser_ = &implementation;
    this->usesdevice_parser_ = &usesdevice;
    this->id_parser_ = &id;
    this->name_parser_ = &name;
    this->type_parser_ = &type;
    this->version_parser_ = &version;
  }

  softPkg_pskel::
  softPkg_pskel ()
  : title_parser_ (0),
    author_parser_ (0),
    description_parser_ (0),
    propertyfile_parser_ (0),
    descriptor_parser_ (0),
    implementation_parser_ (0),
    usesdevice_parser_ (0),
    id_parser_ (0),
    name_parser_ (0),
    type_parser_ (0),
    version_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // localFile_pskel
  //

  void localFile_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void localFile_pskel::
  parsers (::xml_schema::string_pskel& name)
  {
    this->name_parser_ = &name;
  }

  localFile_pskel::
  localFile_pskel ()
  : name_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // propertyFile_pskel
  //

  void propertyFile_pskel::
  localfile_parser (::spd::localFile_pskel& p)
  {
    this->localfile_parser_ = &p;
  }

  void propertyFile_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void propertyFile_pskel::
  parsers (::spd::localFile_pskel& localfile,
           ::xml_schema::string_pskel& type)
  {
    this->localfile_parser_ = &localfile;
    this->type_parser_ = &type;
  }

  propertyFile_pskel::
  propertyFile_pskel ()
  : localfile_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // author_pskel
  //

  void author_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void author_pskel::
  company_parser (::xml_schema::string_pskel& p)
  {
    this->company_parser_ = &p;
  }

  void author_pskel::
  webpage_parser (::xml_schema::uri_pskel& p)
  {
    this->webpage_parser_ = &p;
  }

  void author_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::string_pskel& company,
           ::xml_schema::uri_pskel& webpage)
  {
    this->name_parser_ = &name;
    this->company_parser_ = &company;
    this->webpage_parser_ = &webpage;
  }

  author_pskel::
  author_pskel ()
  : name_parser_ (0),
    company_parser_ (0),
    webpage_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // descriptor_pskel
  //

  void descriptor_pskel::
  localfile_parser (::spd::localFile_pskel& p)
  {
    this->localfile_parser_ = &p;
  }

  void descriptor_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void descriptor_pskel::
  parsers (::spd::localFile_pskel& localfile,
           ::xml_schema::string_pskel& name)
  {
    this->localfile_parser_ = &localfile;
    this->name_parser_ = &name;
  }

  descriptor_pskel::
  descriptor_pskel ()
  : localfile_parser_ (0),
    name_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // implementation_pskel
  //

  void implementation_pskel::
  description_parser (::xml_schema::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void implementation_pskel::
  propertyfile_parser (::spd::propertyFile_pskel& p)
  {
    this->propertyfile_parser_ = &p;
  }

  void implementation_pskel::
  code_parser (::spd::code_pskel& p)
  {
    this->code_parser_ = &p;
  }

  void implementation_pskel::
  compiler_parser (::spd::compiler_pskel& p)
  {
    this->compiler_parser_ = &p;
  }

  void implementation_pskel::
  programminglanguage_parser (::spd::programmingLanguage_pskel& p)
  {
    this->programminglanguage_parser_ = &p;
  }

  void implementation_pskel::
  humanlanguage_parser (::spd::humanLanguage_pskel& p)
  {
    this->humanlanguage_parser_ = &p;
  }

  void implementation_pskel::
  runtime_parser (::spd::runtime_pskel& p)
  {
    this->runtime_parser_ = &p;
  }

  void implementation_pskel::
  os_parser (::spd::os_pskel& p)
  {
    this->os_parser_ = &p;
  }

  void implementation_pskel::
  processor_parser (::spd::processor_pskel& p)
  {
    this->processor_parser_ = &p;
  }

  void implementation_pskel::
  dependency_parser (::spd::dependency_pskel& p)
  {
    this->dependency_parser_ = &p;
  }

  void implementation_pskel::
  usesdevice_parser (::spd::usesDevice_pskel& p)
  {
    this->usesdevice_parser_ = &p;
  }

  void implementation_pskel::
  id_parser (::xml_schema::string_pskel& p)
  {
    this->id_parser_ = &p;
  }

  void implementation_pskel::
  aepcompliance_parser (::spd::aepcompliance_pskel& p)
  {
    this->aepcompliance_parser_ = &p;
  }

  void implementation_pskel::
  parsers (::xml_schema::string_pskel& description,
           ::spd::propertyFile_pskel& propertyfile,
           ::spd::code_pskel& code,
           ::spd::compiler_pskel& compiler,
           ::spd::programmingLanguage_pskel& programminglanguage,
           ::spd::humanLanguage_pskel& humanlanguage,
           ::spd::runtime_pskel& runtime,
           ::spd::os_pskel& os,
           ::spd::processor_pskel& processor,
           ::spd::dependency_pskel& dependency,
           ::spd::usesDevice_pskel& usesdevice,
           ::xml_schema::string_pskel& id,
           ::spd::aepcompliance_pskel& aepcompliance)
  {
    this->description_parser_ = &description;
    this->propertyfile_parser_ = &propertyfile;
    this->code_parser_ = &code;
    this->compiler_parser_ = &compiler;
    this->programminglanguage_parser_ = &programminglanguage;
    this->humanlanguage_parser_ = &humanlanguage;
    this->runtime_parser_ = &runtime;
    this->os_parser_ = &os;
    this->processor_parser_ = &processor;
    this->dependency_parser_ = &dependency;
    this->usesdevice_parser_ = &usesdevice;
    this->id_parser_ = &id;
    this->aepcompliance_parser_ = &aepcompliance;
  }

  implementation_pskel::
  implementation_pskel ()
  : description_parser_ (0),
    propertyfile_parser_ (0),
    code_parser_ (0),
    compiler_parser_ (0),
    programminglanguage_parser_ (0),
    humanlanguage_parser_ (0),
    runtime_parser_ (0),
    os_parser_ (0),
    processor_parser_ (0),
    dependency_parser_ (0),
    usesdevice_parser_ (0),
    id_parser_ (0),
    aepcompliance_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // code_pskel
  //

  void code_pskel::
  localfile_parser (::spd::localFile_pskel& p)
  {
    this->localfile_parser_ = &p;
  }

  void code_pskel::
  entrypoint_parser (::xml_schema::string_pskel& p)
  {
    this->entrypoint_parser_ = &p;
  }

  void code_pskel::
  stacksize_parser (::xml_schema::unsigned_long_pskel& p)
  {
    this->stacksize_parser_ = &p;
  }

  void code_pskel::
  priority_parser (::xml_schema::unsigned_long_pskel& p)
  {
    this->priority_parser_ = &p;
  }

  void code_pskel::
  type_parser (::spd::codeFileType_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void code_pskel::
  parsers (::spd::localFile_pskel& localfile,
           ::xml_schema::string_pskel& entrypoint,
           ::xml_schema::unsigned_long_pskel& stacksize,
           ::xml_schema::unsigned_long_pskel& priority,
           ::spd::codeFileType_pskel& type)
  {
    this->localfile_parser_ = &localfile;
    this->entrypoint_parser_ = &entrypoint;
    this->stacksize_parser_ = &stacksize;
    this->priority_parser_ = &priority;
    this->type_parser_ = &type;
  }

  code_pskel::
  code_pskel ()
  : localfile_parser_ (0),
    entrypoint_parser_ (0),
    stacksize_parser_ (0),
    priority_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // compiler_pskel
  //

  void compiler_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void compiler_pskel::
  version_parser (::xml_schema::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void compiler_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::string_pskel& version)
  {
    this->name_parser_ = &name;
    this->version_parser_ = &version;
  }

  compiler_pskel::
  compiler_pskel ()
  : name_parser_ (0),
    version_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // programmingLanguage_pskel
  //

  void programmingLanguage_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void programmingLanguage_pskel::
  version_parser (::xml_schema::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void programmingLanguage_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::string_pskel& version)
  {
    this->name_parser_ = &name;
    this->version_parser_ = &version;
  }

  programmingLanguage_pskel::
  programmingLanguage_pskel ()
  : name_parser_ (0),
    version_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // humanLanguage_pskel
  //

  void humanLanguage_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void humanLanguage_pskel::
  parsers (::xml_schema::string_pskel& name)
  {
    this->name_parser_ = &name;
  }

  humanLanguage_pskel::
  humanLanguage_pskel ()
  : name_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // os_pskel
  //

  void os_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void os_pskel::
  version_parser (::xml_schema::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void os_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::string_pskel& version)
  {
    this->name_parser_ = &name;
    this->version_parser_ = &version;
  }

  os_pskel::
  os_pskel ()
  : name_parser_ (0),
    version_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // processor_pskel
  //

  void processor_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void processor_pskel::
  parsers (::xml_schema::string_pskel& name)
  {
    this->name_parser_ = &name;
  }

  processor_pskel::
  processor_pskel ()
  : name_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // dependency_pskel
  //

  void dependency_pskel::
  softpkgref_parser (::spd::softPkgRef_pskel& p)
  {
    this->softpkgref_parser_ = &p;
  }

  void dependency_pskel::
  propertyref_parser (::spd::propertyRef_pskel& p)
  {
    this->propertyref_parser_ = &p;
  }

  void dependency_pskel::
  simpleref_parser (::spd::simpleref_pskel& p)
  {
    this->simpleref_parser_ = &p;
  }

  void dependency_pskel::
  simplesequenceref_parser (::spd::simplesequenceref_pskel& p)
  {
    this->simplesequenceref_parser_ = &p;
  }

  void dependency_pskel::
  structref_parser (::spd::structref_pskel& p)
  {
    this->structref_parser_ = &p;
  }

  void dependency_pskel::
  structsequenceref_parser (::spd::structsequenceref_pskel& p)
  {
    this->structsequenceref_parser_ = &p;
  }

  void dependency_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void dependency_pskel::
  parsers (::spd::softPkgRef_pskel& softpkgref,
           ::spd::propertyRef_pskel& propertyref,
           ::spd::simpleref_pskel& simpleref,
           ::spd::simplesequenceref_pskel& simplesequenceref,
           ::spd::structref_pskel& structref,
           ::spd::structsequenceref_pskel& structsequenceref,
           ::xml_schema::string_pskel& type)
  {
    this->softpkgref_parser_ = &softpkgref;
    this->propertyref_parser_ = &propertyref;
    this->simpleref_parser_ = &simpleref;
    this->simplesequenceref_parser_ = &simplesequenceref;
    this->structref_parser_ = &structref;
    this->structsequenceref_parser_ = &structsequenceref;
    this->type_parser_ = &type;
  }

  dependency_pskel::
  dependency_pskel ()
  : softpkgref_parser_ (0),
    propertyref_parser_ (0),
    simpleref_parser_ (0),
    simplesequenceref_parser_ (0),
    structref_parser_ (0),
    structsequenceref_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // runtime_pskel
  //

  void runtime_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void runtime_pskel::
  version_parser (::xml_schema::string_pskel& p)
  {
    this->version_parser_ = &p;
  }

  void runtime_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::string_pskel& version)
  {
    this->name_parser_ = &name;
    this->version_parser_ = &version;
  }

  runtime_pskel::
  runtime_pskel ()
  : name_parser_ (0),
    version_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // propertyRef_pskel
  //

  void propertyRef_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void propertyRef_pskel::
  value_parser (::xml_schema::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void propertyRef_pskel::
  parsers (::xml_schema::string_pskel& refid,
           ::xml_schema::string_pskel& value)
  {
    this->refid_parser_ = &refid;
    this->value_parser_ = &value;
  }

  propertyRef_pskel::
  propertyRef_pskel ()
  : refid_parser_ (0),
    value_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // softPkgRef_pskel
  //

  void softPkgRef_pskel::
  localfile_parser (::spd::localFile_pskel& p)
  {
    this->localfile_parser_ = &p;
  }

  void softPkgRef_pskel::
  implref_parser (::spd::implRef_pskel& p)
  {
    this->implref_parser_ = &p;
  }

  void softPkgRef_pskel::
  parsers (::spd::localFile_pskel& localfile,
           ::spd::implRef_pskel& implref)
  {
    this->localfile_parser_ = &localfile;
    this->implref_parser_ = &implref;
  }

  softPkgRef_pskel::
  softPkgRef_pskel ()
  : localfile_parser_ (0),
    implref_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // implRef_pskel
  //

  void implRef_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void implRef_pskel::
  parsers (::xml_schema::string_pskel& refid)
  {
    this->refid_parser_ = &refid;
  }

  implRef_pskel::
  implRef_pskel ()
  : refid_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // usesDevice_pskel
  //

  void usesDevice_pskel::
  propertyref_parser (::spd::propertyRef_pskel& p)
  {
    this->propertyref_parser_ = &p;
  }

  void usesDevice_pskel::
  simpleref_parser (::spd::simpleref_pskel& p)
  {
    this->simpleref_parser_ = &p;
  }

  void usesDevice_pskel::
  simplesequenceref_parser (::spd::simplesequenceref_pskel& p)
  {
    this->simplesequenceref_parser_ = &p;
  }

  void usesDevice_pskel::
  structref_parser (::spd::structref_pskel& p)
  {
    this->structref_parser_ = &p;
  }

  void usesDevice_pskel::
  structsequenceref_parser (::spd::structsequenceref_pskel& p)
  {
    this->structsequenceref_parser_ = &p;
  }

  void usesDevice_pskel::
  id_parser (::xml_schema::string_pskel& p)
  {
    this->id_parser_ = &p;
  }

  void usesDevice_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void usesDevice_pskel::
  parsers (::spd::propertyRef_pskel& propertyref,
           ::spd::simpleref_pskel& simpleref,
           ::spd::simplesequenceref_pskel& simplesequenceref,
           ::spd::structref_pskel& structref,
           ::spd::structsequenceref_pskel& structsequenceref,
           ::xml_schema::string_pskel& id,
           ::xml_schema::string_pskel& type)
  {
    this->propertyref_parser_ = &propertyref;
    this->simpleref_parser_ = &simpleref;
    this->simplesequenceref_parser_ = &simplesequenceref;
    this->structref_parser_ = &structref;
    this->structsequenceref_parser_ = &structsequenceref;
    this->id_parser_ = &id;
    this->type_parser_ = &type;
  }

  usesDevice_pskel::
  usesDevice_pskel ()
  : propertyref_parser_ (0),
    simpleref_parser_ (0),
    simplesequenceref_parser_ (0),
    structref_parser_ (0),
    structsequenceref_parser_ (0),
    id_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // simpleref_pskel
  //

  void simpleref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void simpleref_pskel::
  value_parser (::xml_schema::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void simpleref_pskel::
  parsers (::xml_schema::string_pskel& refid,
           ::xml_schema::string_pskel& value)
  {
    this->refid_parser_ = &refid;
    this->value_parser_ = &value;
  }

  simpleref_pskel::
  simpleref_pskel ()
  : refid_parser_ (0),
    value_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // simplesequenceref_pskel
  //

  void simplesequenceref_pskel::
  values_parser (::spd::values_pskel& p)
  {
    this->values_parser_ = &p;
  }

  void simplesequenceref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void simplesequenceref_pskel::
  parsers (::spd::values_pskel& values,
           ::xml_schema::string_pskel& refid)
  {
    this->values_parser_ = &values;
    this->refid_parser_ = &refid;
  }

  simplesequenceref_pskel::
  simplesequenceref_pskel ()
  : values_parser_ (0),
    refid_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // structref_pskel
  //

  void structref_pskel::
  simpleref_parser (::spd::simpleref_pskel& p)
  {
    this->simpleref_parser_ = &p;
  }

  void structref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void structref_pskel::
  parsers (::spd::simpleref_pskel& simpleref,
           ::xml_schema::string_pskel& refid)
  {
    this->simpleref_parser_ = &simpleref;
    this->refid_parser_ = &refid;
  }

  structref_pskel::
  structref_pskel ()
  : simpleref_parser_ (0),
    refid_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // structsequenceref_pskel
  //

  void structsequenceref_pskel::
  structvalue_parser (::spd::structvalue_pskel& p)
  {
    this->structvalue_parser_ = &p;
  }

  void structsequenceref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void structsequenceref_pskel::
  parsers (::spd::structvalue_pskel& structvalue,
           ::xml_schema::string_pskel& refid)
  {
    this->structvalue_parser_ = &structvalue;
    this->refid_parser_ = &refid;
  }

  structsequenceref_pskel::
  structsequenceref_pskel ()
  : structvalue_parser_ (0),
    refid_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // structvalue_pskel
  //

  void structvalue_pskel::
  simpleref_parser (::spd::simpleref_pskel& p)
  {
    this->simpleref_parser_ = &p;
  }

  void structvalue_pskel::
  parsers (::spd::simpleref_pskel& simpleref)
  {
    this->simpleref_parser_ = &simpleref;
  }

  structvalue_pskel::
  structvalue_pskel ()
  : simpleref_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // values_pskel
  //

  void values_pskel::
  value_parser (::xml_schema::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void values_pskel::
  parsers (::xml_schema::string_pskel& value)
  {
    this->value_parser_ = &value;
  }

  values_pskel::
  values_pskel ()
  : value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

namespace spd
{
  // softPkg_pskel
  //

  void softPkg_pskel::
  title (const ::std::string&)
  {
  }

  void softPkg_pskel::
  author (const ossie::SPD::Author&)
  {
  }

  void softPkg_pskel::
  description (const ::std::string&)
  {
  }

  void softPkg_pskel::
  propertyfile (const ::std::string&)
  {
  }

  void softPkg_pskel::
  descriptor (const ::std::string&)
  {
  }

  void softPkg_pskel::
  implementation (const ossie::SPD::Implementation&)
  {
  }

  void softPkg_pskel::
  usesdevice (const ossie::SPD::UsesDevice&)
  {
  }

  void softPkg_pskel::
  id (const ::std::string&)
  {
  }

  void softPkg_pskel::
  name (const ::std::string&)
  {
  }

  void softPkg_pskel::
  type (const ::std::string&)
  {
  }

  void softPkg_pskel::
  version (const ::std::string&)
  {
  }

  // scaComplianceType_pskel
  //

  ::std::string scaComplianceType_pskel::
  post_scaComplianceType ()
  {
    return post_nmtoken ();
  }

  // localFile_pskel
  //

  void localFile_pskel::
  name (const ::std::string&)
  {
  }

  // propertyFile_pskel
  //

  void propertyFile_pskel::
  localfile (const ::std::string&)
  {
  }

  void propertyFile_pskel::
  type (const ::std::string&)
  {
  }

  // author_pskel
  //

  void author_pskel::
  name (const ::std::string&)
  {
  }

  void author_pskel::
  company (const ::std::string&)
  {
  }

  void author_pskel::
  webpage (const ::std::string&)
  {
  }

  // descriptor_pskel
  //

  void descriptor_pskel::
  localfile (const ::std::string&)
  {
  }

  void descriptor_pskel::
  name (const ::std::string&)
  {
  }

  // implementation_pskel
  //

  void implementation_pskel::
  description (const ::std::string&)
  {
  }

  void implementation_pskel::
  propertyfile (const ::std::string&)
  {
  }

  void implementation_pskel::
  code (const ossie::SPD::Code&)
  {
  }

  void implementation_pskel::
  compiler (const ossie::SPD::NameVersionPair&)
  {
  }

  void implementation_pskel::
  programminglanguage ()
  {
  }

  void implementation_pskel::
  humanlanguage ()
  {
  }

  void implementation_pskel::
  runtime (const ossie::SPD::NameVersionPair&)
  {
  }

  void implementation_pskel::
  os (const ossie::SPD::NameVersionPair&)
  {
  }

  void implementation_pskel::
  processor (const ::std::string&)
  {
  }

  void implementation_pskel::
  dependency (ossie::SPD::DependencyRef*)
  {
  }

  void implementation_pskel::
  usesdevice (const ossie::SPD::UsesDevice&)
  {
  }

  void implementation_pskel::
  id (const ::std::string&)
  {
  }

  void implementation_pskel::
  aepcompliance ()
  {
  }

  // code_pskel
  //

  void code_pskel::
  localfile (const ::std::string&)
  {
  }

  void code_pskel::
  entrypoint (const ::std::string&)
  {
  }

  void code_pskel::
  stacksize (unsigned long long)
  {
  }

  void code_pskel::
  priority (unsigned long long)
  {
  }

  void code_pskel::
  type (const ::std::string&)
  {
  }

  // codeFileType_pskel
  //

  ::std::string codeFileType_pskel::
  post_codeFileType ()
  {
    return post_nmtoken ();
  }

  // compiler_pskel
  //

  void compiler_pskel::
  name (const ::std::string&)
  {
  }

  void compiler_pskel::
  version (const ::std::string&)
  {
  }

  // programmingLanguage_pskel
  //

  void programmingLanguage_pskel::
  name (const ::std::string&)
  {
  }

  void programmingLanguage_pskel::
  version (const ::std::string&)
  {
  }

  void programmingLanguage_pskel::
  post_programmingLanguage ()
  {
  }

  // humanLanguage_pskel
  //

  void humanLanguage_pskel::
  name (const ::std::string&)
  {
  }

  void humanLanguage_pskel::
  post_humanLanguage ()
  {
  }

  // os_pskel
  //

  void os_pskel::
  name (const ::std::string&)
  {
  }

  void os_pskel::
  version (const ::std::string&)
  {
  }

  // processor_pskel
  //

  void processor_pskel::
  name (const ::std::string&)
  {
  }

  // dependency_pskel
  //

  void dependency_pskel::
  softpkgref (const ossie::SPD::SoftPkgRef&)
  {
  }

  void dependency_pskel::
  propertyref (const ossie::SPD::PropertyRef&)
  {
  }

  void dependency_pskel::
  simpleref (ossie::SimplePropertyRef*)
  {
  }

  void dependency_pskel::
  simplesequenceref (ossie::SimpleSequencePropertyRef*)
  {
  }

  void dependency_pskel::
  structref (ossie::StructPropertyRef*)
  {
  }

  void dependency_pskel::
  structsequenceref (ossie::StructSequencePropertyRef*)
  {
  }

  void dependency_pskel::
  type (const ::std::string&)
  {
  }

  // runtime_pskel
  //

  void runtime_pskel::
  name (const ::std::string&)
  {
  }

  void runtime_pskel::
  version (const ::std::string&)
  {
  }

  // propertyRef_pskel
  //

  void propertyRef_pskel::
  refid (const ::std::string&)
  {
  }

  void propertyRef_pskel::
  value (const ::std::string&)
  {
  }

  // softPkgRef_pskel
  //

  void softPkgRef_pskel::
  localfile (const ::std::string&)
  {
  }

  void softPkgRef_pskel::
  implref (const ::std::string&)
  {
  }

  // implRef_pskel
  //

  void implRef_pskel::
  refid (const ::std::string&)
  {
  }

  // usesDevice_pskel
  //

  void usesDevice_pskel::
  propertyref (const ossie::SPD::PropertyRef&)
  {
  }

  void usesDevice_pskel::
  simpleref (ossie::SimplePropertyRef*)
  {
  }

  void usesDevice_pskel::
  simplesequenceref (ossie::SimpleSequencePropertyRef*)
  {
  }

  void usesDevice_pskel::
  structref (ossie::StructPropertyRef*)
  {
  }

  void usesDevice_pskel::
  structsequenceref (ossie::StructSequencePropertyRef*)
  {
  }

  void usesDevice_pskel::
  id (const ::std::string&)
  {
  }

  void usesDevice_pskel::
  type (const ::std::string&)
  {
  }

  // simpleref_pskel
  //

  void simpleref_pskel::
  refid (const ::std::string&)
  {
  }

  void simpleref_pskel::
  value (const ::std::string&)
  {
  }

  // simplesequenceref_pskel
  //

  void simplesequenceref_pskel::
  values (const ::std::vector<std::string>&)
  {
  }

  void simplesequenceref_pskel::
  refid (const ::std::string&)
  {
  }

  // structref_pskel
  //

  void structref_pskel::
  simpleref (ossie::SimplePropertyRef*)
  {
  }

  void structref_pskel::
  refid (const ::std::string&)
  {
  }

  // structsequenceref_pskel
  //

  void structsequenceref_pskel::
  structvalue (const ::std::map<std::string, std::string>&)
  {
  }

  void structsequenceref_pskel::
  refid (const ::std::string&)
  {
  }

  // structvalue_pskel
  //

  void structvalue_pskel::
  simpleref (ossie::SimplePropertyRef*)
  {
  }

  // values_pskel
  //

  void values_pskel::
  value (const ::std::string&)
  {
  }

  // aepcompliance_pskel
  //

  void aepcompliance_pskel::
  post_aepcompliance ()
  {
  }
}

#include <cassert>

namespace spd
{
  // Element validation and dispatch functions for softPkg_pskel.
  //
  bool softPkg_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "title" && ns.empty ())
          s = 0UL;
        else if (n == "author" && ns.empty ())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &softPkg_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "title",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool softPkg_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void softPkg_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void softPkg_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "title");

    this->v_state_stack_.pop ();
  }

  void softPkg_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "title" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->title_parser_;

            if (this->title_parser_)
              this->title_parser_->pre ();
          }
          else
          {
            if (this->title_parser_)
            {
              const ::std::string& tmp (this->title_parser_->post_string ());
              this->title (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "author" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->author_parser_;

            if (this->author_parser_)
              this->author_parser_->pre ();
          }
          else
          {
            if (this->author_parser_)
            {
              const ossie::SPD::Author& tmp (this->author_parser_->post_author ());
              this->author (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "author",
              ns, n);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "description" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->description_parser_;

            if (this->description_parser_)
              this->description_parser_->pre ();
          }
          else
          {
            if (this->description_parser_)
            {
              const ::std::string& tmp (this->description_parser_->post_string ());
              this->description (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "propertyfile" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->propertyfile_parser_;

            if (this->propertyfile_parser_)
              this->propertyfile_parser_->pre ();
          }
          else
          {
            if (this->propertyfile_parser_)
            {
              const ::std::string& tmp (this->propertyfile_parser_->post_propertyFile ());
              this->propertyfile (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "descriptor" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->descriptor_parser_;

            if (this->descriptor_parser_)
              this->descriptor_parser_->pre ();
          }
          else
          {
            if (this->descriptor_parser_)
            {
              const ::std::string& tmp (this->descriptor_parser_->post_descriptor ());
              this->descriptor (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "implementation" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->implementation_parser_;

            if (this->implementation_parser_)
              this->implementation_parser_->pre ();
          }
          else
          {
            if (this->implementation_parser_)
            {
              const ossie::SPD::Implementation& tmp (this->implementation_parser_->post_implementation ());
              this->implementation (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "implementation",
              ns, n);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "usesdevice" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->usesdevice_parser_;

            if (this->usesdevice_parser_)
              this->usesdevice_parser_->pre ();
          }
          else
          {
            if (this->usesdevice_parser_)
            {
              const ossie::SPD::UsesDevice& tmp (this->usesdevice_parser_->post_usesDevice ());
              this->usesdevice (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for propertyFile_pskel.
  //
  bool propertyFile_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "localfile" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &propertyFile_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool propertyFile_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void propertyFile_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void propertyFile_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "localfile");

    this->v_state_stack_.pop ();
  }

  void propertyFile_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "localfile" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->localfile_parser_;

            if (this->localfile_parser_)
              this->localfile_parser_->pre ();
          }
          else
          {
            if (this->localfile_parser_)
            {
              const ::std::string& tmp (this->localfile_parser_->post_localFile ());
              this->localfile (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for author_pskel.
  //
  bool author_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "name" && ns.empty ())
          s = 0UL;
        else if (n == "company" && ns.empty ())
          s = 1UL;
        else if (n == "webpage" && ns.empty ())
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &author_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool author_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void author_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void author_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void author_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "name" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

            if (this->name_parser_)
              this->name_parser_->pre ();
          }
          else
          {
            if (this->name_parser_)
            {
              const ::std::string& tmp (this->name_parser_->post_string ());
              this->name (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "company" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->company_parser_;

            if (this->company_parser_)
              this->company_parser_->pre ();
          }
          else
          {
            if (this->company_parser_)
            {
              const ::std::string& tmp (this->company_parser_->post_string ());
              this->company (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "webpage" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->webpage_parser_;

            if (this->webpage_parser_)
              this->webpage_parser_->pre ();
          }
          else
          {
            if (this->webpage_parser_)
            {
              const ::std::string& tmp (this->webpage_parser_->post_uri ());
              this->webpage (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for descriptor_pskel.
  //
  bool descriptor_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "localfile" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &descriptor_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool descriptor_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void descriptor_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void descriptor_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "localfile");

    this->v_state_stack_.pop ();
  }

  void descriptor_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "localfile" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->localfile_parser_;

            if (this->localfile_parser_)
              this->localfile_parser_->pre ();
          }
          else
          {
            if (this->localfile_parser_)
            {
              const ::std::string& tmp (this->localfile_parser_->post_localFile ());
              this->localfile (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for implementation_pskel.
  //
  bool implementation_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" && ns.empty ())
          s = 0UL;
        else if (n == "propertyfile" && ns.empty ())
          s = 1UL;
        else if (n == "code" && ns.empty ())
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &implementation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "description",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool implementation_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void implementation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void implementation_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "description");

    this->v_state_stack_.pop ();
  }

  void implementation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->description_parser_;

            if (this->description_parser_)
              this->description_parser_->pre ();
          }
          else
          {
            if (this->description_parser_)
            {
              const ::std::string& tmp (this->description_parser_->post_string ());
              this->description (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "propertyfile" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->propertyfile_parser_;

            if (this->propertyfile_parser_)
              this->propertyfile_parser_->pre ();
          }
          else
          {
            if (this->propertyfile_parser_)
            {
              const ::std::string& tmp (this->propertyfile_parser_->post_propertyFile ());
              this->propertyfile (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "code" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->code_parser_;

            if (this->code_parser_)
              this->code_parser_->pre ();
          }
          else
          {
            if (this->code_parser_)
            {
              const ossie::SPD::Code& tmp (this->code_parser_->post_code ());
              this->code (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "code",
              ns, n);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "compiler" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->compiler_parser_;

            if (this->compiler_parser_)
              this->compiler_parser_->pre ();
          }
          else
          {
            if (this->compiler_parser_)
            {
              const ossie::SPD::NameVersionPair& tmp (this->compiler_parser_->post_compiler ());
              this->compiler (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "programminglanguage" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->programminglanguage_parser_;

            if (this->programminglanguage_parser_)
              this->programminglanguage_parser_->pre ();
          }
          else
          {
            if (this->programminglanguage_parser_)
            {
              this->programminglanguage_parser_->post_programmingLanguage ();
              this->programminglanguage ();
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "humanlanguage" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->humanlanguage_parser_;

            if (this->humanlanguage_parser_)
              this->humanlanguage_parser_->pre ();
          }
          else
          {
            if (this->humanlanguage_parser_)
            {
              this->humanlanguage_parser_->post_humanLanguage ();
              this->humanlanguage ();
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "runtime" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->runtime_parser_;

            if (this->runtime_parser_)
              this->runtime_parser_->pre ();
          }
          else
          {
            if (this->runtime_parser_)
            {
              const ossie::SPD::NameVersionPair& tmp (this->runtime_parser_->post_runtime ());
              this->runtime (tmp);
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        unsigned long s (~0UL);

        if (n == "os" && ns.empty ())
          s = 0UL;
        else if (n == "processor" && ns.empty ())
          s = 1UL;
        else if (n == "dependency" && ns.empty ())
          s = 2UL;

        if (s != ~0UL)
        {
          assert (start);
          count++;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &implementation_pskel::choice_0;
          vd.state = s;
          vd.count = 0;

          this->choice_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "os",
              ns, n);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "usesdevice" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->usesdevice_parser_;

            if (this->usesdevice_parser_)
              this->usesdevice_parser_->pre ();
          }
          else
          {
            if (this->usesdevice_parser_)
            {
              const ossie::SPD::UsesDevice& tmp (this->usesdevice_parser_->post_usesDevice ());
              this->usesdevice (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void implementation_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->os_parser_;

          if (this->os_parser_)
            this->os_parser_->pre ();
        }
        else
        {
          if (this->os_parser_)
          {
            const ossie::SPD::NameVersionPair& tmp (this->os_parser_->post_os ());
            this->os (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->processor_parser_;

          if (this->processor_parser_)
            this->processor_parser_->pre ();
        }
        else
        {
          if (this->processor_parser_)
          {
            const ::std::string& tmp (this->processor_parser_->post_processor ());
            this->processor (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 2UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->dependency_parser_;

          if (this->dependency_parser_)
            this->dependency_parser_->pre ();
        }
        else
        {
          if (this->dependency_parser_)
          {
            ossie::SPD::DependencyRef* tmp (this->dependency_parser_->post_dependency ());
            this->dependency (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for code_pskel.
  //
  bool code_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "localfile" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &code_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool code_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void code_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void code_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "localfile");

    this->v_state_stack_.pop ();
  }

  void code_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "localfile" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->localfile_parser_;

            if (this->localfile_parser_)
              this->localfile_parser_->pre ();
          }
          else
          {
            if (this->localfile_parser_)
            {
              const ::std::string& tmp (this->localfile_parser_->post_localFile ());
              this->localfile (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "entrypoint" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->entrypoint_parser_;

            if (this->entrypoint_parser_)
              this->entrypoint_parser_->pre ();
          }
          else
          {
            if (this->entrypoint_parser_)
            {
              const ::std::string& tmp (this->entrypoint_parser_->post_string ());
              this->entrypoint (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "stacksize" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->stacksize_parser_;

            if (this->stacksize_parser_)
              this->stacksize_parser_->pre ();
          }
          else
          {
            if (this->stacksize_parser_)
            {
              unsigned long long tmp (this->stacksize_parser_->post_unsigned_long ());
              this->stacksize (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "priority" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->priority_parser_;

            if (this->priority_parser_)
              this->priority_parser_->pre ();
          }
          else
          {
            if (this->priority_parser_)
            {
              unsigned long long tmp (this->priority_parser_->post_unsigned_long ());
              this->priority (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for dependency_pskel.
  //
  bool dependency_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "softpkgref" && ns.empty ())
          s = 0UL;
        else if (n == "propertyref" && ns.empty ())
          s = 1UL;
        else if (n == "simpleref" && ns.empty ())
          s = 2UL;
        else if (n == "simplesequenceref" && ns.empty ())
          s = 3UL;
        else if (n == "structref" && ns.empty ())
          s = 4UL;
        else if (n == "structsequenceref" && ns.empty ())
          s = 5UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &dependency_pskel::choice_0;
          vd->state = s;
          vd->count = 0;

          this->choice_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "softpkgref",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool dependency_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void dependency_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void dependency_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "softpkgref");

    this->v_state_stack_.pop ();
  }

  void dependency_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->softpkgref_parser_;

          if (this->softpkgref_parser_)
            this->softpkgref_parser_->pre ();
        }
        else
        {
          if (this->softpkgref_parser_)
          {
            const ossie::SPD::SoftPkgRef& tmp (this->softpkgref_parser_->post_softPkgRef ());
            this->softpkgref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->propertyref_parser_;

          if (this->propertyref_parser_)
            this->propertyref_parser_->pre ();
        }
        else
        {
          if (this->propertyref_parser_)
          {
            const ossie::SPD::PropertyRef& tmp (this->propertyref_parser_->post_propertyRef ());
            this->propertyref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 2UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->simpleref_parser_;

          if (this->simpleref_parser_)
            this->simpleref_parser_->pre ();
        }
        else
        {
          if (this->simpleref_parser_)
          {
            ossie::SimplePropertyRef* tmp (this->simpleref_parser_->post_simpleref ());
            this->simpleref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 3UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->simplesequenceref_parser_;

          if (this->simplesequenceref_parser_)
            this->simplesequenceref_parser_->pre ();
        }
        else
        {
          if (this->simplesequenceref_parser_)
          {
            ossie::SimpleSequencePropertyRef* tmp (this->simplesequenceref_parser_->post_simplesequenceref ());
            this->simplesequenceref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 4UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->structref_parser_;

          if (this->structref_parser_)
            this->structref_parser_->pre ();
        }
        else
        {
          if (this->structref_parser_)
          {
            ossie::StructPropertyRef* tmp (this->structref_parser_->post_structref ());
            this->structref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 5UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->structsequenceref_parser_;

          if (this->structsequenceref_parser_)
            this->structsequenceref_parser_->pre ();
        }
        else
        {
          if (this->structsequenceref_parser_)
          {
            ossie::StructSequencePropertyRef* tmp (this->structsequenceref_parser_->post_structsequenceref ());
            this->structsequenceref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for softPkgRef_pskel.
  //
  bool softPkgRef_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "localfile" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &softPkgRef_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool softPkgRef_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void softPkgRef_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void softPkgRef_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "localfile");

    this->v_state_stack_.pop ();
  }

  void softPkgRef_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "localfile" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->localfile_parser_;

            if (this->localfile_parser_)
              this->localfile_parser_->pre ();
          }
          else
          {
            if (this->localfile_parser_)
            {
              const ::std::string& tmp (this->localfile_parser_->post_localFile ());
              this->localfile (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "implref" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->implref_parser_;

            if (this->implref_parser_)
              this->implref_parser_->pre ();
          }
          else
          {
            if (this->implref_parser_)
            {
              const ::std::string& tmp (this->implref_parser_->post_implRef ());
              this->implref (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for usesDevice_pskel.
  //
  bool usesDevice_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "propertyref" && ns.empty ())
          s = 0UL;
        else if (n == "simpleref" && ns.empty ())
          s = 1UL;
        else if (n == "simplesequenceref" && ns.empty ())
          s = 2UL;
        else if (n == "structref" && ns.empty ())
          s = 3UL;
        else if (n == "structsequenceref" && ns.empty ())
          s = 4UL;

        if (s != ~0UL)
        {
          vd->count++;

          vd = vs.data + vs.size++;
          vd->func = &usesDevice_pskel::choice_0;
          vd->state = s;
          vd->count = 0;

          this->choice_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "propertyref",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool usesDevice_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void usesDevice_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void usesDevice_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "propertyref");

    this->v_state_stack_.pop ();
  }

  void usesDevice_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->propertyref_parser_;

          if (this->propertyref_parser_)
            this->propertyref_parser_->pre ();
        }
        else
        {
          if (this->propertyref_parser_)
          {
            const ossie::SPD::PropertyRef& tmp (this->propertyref_parser_->post_propertyRef ());
            this->propertyref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->simpleref_parser_;

          if (this->simpleref_parser_)
            this->simpleref_parser_->pre ();
        }
        else
        {
          if (this->simpleref_parser_)
          {
            ossie::SimplePropertyRef* tmp (this->simpleref_parser_->post_simpleref ());
            this->simpleref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 2UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->simplesequenceref_parser_;

          if (this->simplesequenceref_parser_)
            this->simplesequenceref_parser_->pre ();
        }
        else
        {
          if (this->simplesequenceref_parser_)
          {
            ossie::SimpleSequencePropertyRef* tmp (this->simplesequenceref_parser_->post_simplesequenceref ());
            this->simplesequenceref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 3UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->structref_parser_;

          if (this->structref_parser_)
            this->structref_parser_->pre ();
        }
        else
        {
          if (this->structref_parser_)
          {
            ossie::StructPropertyRef* tmp (this->structref_parser_->post_structref ());
            this->structref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 4UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->structsequenceref_parser_;

          if (this->structsequenceref_parser_)
            this->structsequenceref_parser_->pre ();
        }
        else
        {
          if (this->structsequenceref_parser_)
          {
            ossie::StructSequencePropertyRef* tmp (this->structsequenceref_parser_->post_structsequenceref ());
            this->structsequenceref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for simplesequenceref_pskel.
  //
  bool simplesequenceref_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "values" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &simplesequenceref_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "values",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool simplesequenceref_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void simplesequenceref_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void simplesequenceref_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "values");

    this->v_state_stack_.pop ();
  }

  void simplesequenceref_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "values" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->values_parser_;

            if (this->values_parser_)
              this->values_parser_->pre ();
          }
          else
          {
            if (this->values_parser_)
            {
              const ::std::vector<std::string>& tmp (this->values_parser_->post_values ());
              this->values (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "values",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for structref_pskel.
  //
  bool structref_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "simpleref" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &structref_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "simpleref",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool structref_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void structref_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void structref_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "simpleref");

    this->v_state_stack_.pop ();
  }

  void structref_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "simpleref" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->simpleref_parser_;

            if (this->simpleref_parser_)
              this->simpleref_parser_->pre ();
          }
          else
          {
            if (this->simpleref_parser_)
            {
              ossie::SimplePropertyRef* tmp (this->simpleref_parser_->post_simpleref ());
              this->simpleref (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "simpleref",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for structsequenceref_pskel.
  //
  bool structsequenceref_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "structvalue" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &structsequenceref_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "structvalue",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool structsequenceref_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void structsequenceref_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void structsequenceref_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "structvalue");

    this->v_state_stack_.pop ();
  }

  void structsequenceref_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "structvalue" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->structvalue_parser_;

            if (this->structvalue_parser_)
              this->structvalue_parser_->pre ();
          }
          else
          {
            if (this->structvalue_parser_)
            {
              const ::std::map<std::string, std::string>& tmp (this->structvalue_parser_->post_structvalue ());
              this->structvalue (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "structvalue",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for structvalue_pskel.
  //
  bool structvalue_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "simpleref" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &structvalue_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "simpleref",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool structvalue_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void structvalue_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void structvalue_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "simpleref");

    this->v_state_stack_.pop ();
  }

  void structvalue_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "simpleref" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->simpleref_parser_;

            if (this->simpleref_parser_)
              this->simpleref_parser_->pre ();
          }
          else
          {
            if (this->simpleref_parser_)
            {
              ossie::SimplePropertyRef* tmp (this->simpleref_parser_->post_simpleref ());
              this->simpleref (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "simpleref",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for values_pskel.
  //
  bool values_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "value" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &values_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "value",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool values_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void values_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void values_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "value");

    this->v_state_stack_.pop ();
  }

  void values_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "value" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

            if (this->value_parser_)
              this->value_parser_->pre ();
          }
          else
          {
            if (this->value_parser_)
            {
              const ::std::string& tmp (this->value_parser_->post_string ());
              this->value (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "value",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace spd
{
  // Attribute validation and dispatch functions for softPkg_pskel.
  //
  bool softPkg_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();
        this->id_parser_->_pre_impl ();
        this->id_parser_->_characters (s);
        this->id_parser_->_post_impl ();
        const ::std::string& tmp (this->id_parser_->post_string ());
        this->id (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_scaComplianceType ());
        this->type (tmp);
      }

      return true;
    }

    if (n == "version" && ns.empty ())
    {
      if (this->version_parser_)
      {
        this->version_parser_->pre ();
        this->version_parser_->_pre_impl ();
        this->version_parser_->_characters (s);
        this->version_parser_->_post_impl ();
        const ::std::string& tmp (this->version_parser_->post_string ());
        this->version (tmp);
      }

      return true;
    }

    return false;
  }

  void softPkg_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.id = false;
    as.name = false;
  }

  void softPkg_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.id)
      this->_expected_attribute (
        "", "id");
    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for localFile_pskel.
  //
  bool localFile_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    return false;
  }

  void localFile_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void localFile_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for propertyFile_pskel.
  //
  bool propertyFile_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_string ());
        this->type (tmp);
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for descriptor_pskel.
  //
  bool descriptor_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for implementation_pskel.
  //
  bool implementation_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();
        this->id_parser_->_pre_impl ();
        this->id_parser_->_characters (s);
        this->id_parser_->_post_impl ();
        const ::std::string& tmp (this->id_parser_->post_string ());
        this->id (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
      return true;
    }

    if (n == "aepcompliance" && ns.empty ())
    {
      if (this->aepcompliance_parser_)
      {
        this->aepcompliance_parser_->pre ();
        this->aepcompliance_parser_->_pre_impl ();
        this->aepcompliance_parser_->_characters (s);
        this->aepcompliance_parser_->_post_impl ();
        this->aepcompliance_parser_->post_aepcompliance ();
        this->aepcompliance ();
      }

      return true;
    }

    return false;
  }

  void implementation_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.id = false;
  }

  void implementation_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.id)
      this->_expected_attribute (
        "", "id");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for code_pskel.
  //
  bool code_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_codeFileType ());
        this->type (tmp);
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for compiler_pskel.
  //
  bool compiler_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "version" && ns.empty ())
    {
      if (this->version_parser_)
      {
        this->version_parser_->pre ();
        this->version_parser_->_pre_impl ();
        this->version_parser_->_characters (s);
        this->version_parser_->_post_impl ();
        const ::std::string& tmp (this->version_parser_->post_string ());
        this->version (tmp);
      }

      return true;
    }

    return false;
  }

  void compiler_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void compiler_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for programmingLanguage_pskel.
  //
  bool programmingLanguage_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "version" && ns.empty ())
    {
      if (this->version_parser_)
      {
        this->version_parser_->pre ();
        this->version_parser_->_pre_impl ();
        this->version_parser_->_characters (s);
        this->version_parser_->_post_impl ();
        const ::std::string& tmp (this->version_parser_->post_string ());
        this->version (tmp);
      }

      return true;
    }

    return false;
  }

  void programmingLanguage_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void programmingLanguage_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for humanLanguage_pskel.
  //
  bool humanLanguage_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    return false;
  }

  void humanLanguage_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void humanLanguage_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for os_pskel.
  //
  bool os_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "version" && ns.empty ())
    {
      if (this->version_parser_)
      {
        this->version_parser_->pre ();
        this->version_parser_->_pre_impl ();
        this->version_parser_->_characters (s);
        this->version_parser_->_post_impl ();
        const ::std::string& tmp (this->version_parser_->post_string ());
        this->version (tmp);
      }

      return true;
    }

    return false;
  }

  void os_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void os_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for processor_pskel.
  //
  bool processor_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    return false;
  }

  void processor_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void processor_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for dependency_pskel.
  //
  bool dependency_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_string ());
        this->type (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
      return true;
    }

    return false;
  }

  void dependency_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.type = false;
  }

  void dependency_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.type)
      this->_expected_attribute (
        "", "type");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for runtime_pskel.
  //
  bool runtime_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    if (n == "version" && ns.empty ())
    {
      if (this->version_parser_)
      {
        this->version_parser_->pre ();
        this->version_parser_->_pre_impl ();
        this->version_parser_->_characters (s);
        this->version_parser_->_post_impl ();
        const ::std::string& tmp (this->version_parser_->post_string ());
        this->version (tmp);
      }

      return true;
    }

    return false;
  }

  void runtime_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void runtime_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for propertyRef_pskel.
  //
  bool propertyRef_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();
        this->value_parser_->_pre_impl ();
        this->value_parser_->_characters (s);
        this->value_parser_->_post_impl ();
        const ::std::string& tmp (this->value_parser_->post_string ());
        this->value (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->value = true;
      return true;
    }

    return false;
  }

  void propertyRef_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
    as.value = false;
  }

  void propertyRef_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");
    if (!as.value)
      this->_expected_attribute (
        "", "value");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for implRef_pskel.
  //
  bool implRef_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void implRef_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void implRef_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for usesDevice_pskel.
  //
  bool usesDevice_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();
        this->id_parser_->_pre_impl ();
        this->id_parser_->_characters (s);
        this->id_parser_->_post_impl ();
        const ::std::string& tmp (this->id_parser_->post_string ());
        this->id (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
      return true;
    }

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_string ());
        this->type (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
      return true;
    }

    return false;
  }

  void usesDevice_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.id = false;
    as.type = false;
  }

  void usesDevice_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.id)
      this->_expected_attribute (
        "", "id");
    if (!as.type)
      this->_expected_attribute (
        "", "type");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for simpleref_pskel.
  //
  bool simpleref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();
        this->value_parser_->_pre_impl ();
        this->value_parser_->_characters (s);
        this->value_parser_->_post_impl ();
        const ::std::string& tmp (this->value_parser_->post_string ());
        this->value (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->value = true;
      return true;
    }

    return false;
  }

  void simpleref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
    as.value = false;
  }

  void simpleref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");
    if (!as.value)
      this->_expected_attribute (
        "", "value");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for simplesequenceref_pskel.
  //
  bool simplesequenceref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void simplesequenceref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void simplesequenceref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for structref_pskel.
  //
  bool structref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void structref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void structref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for structsequenceref_pskel.
  //
  bool structsequenceref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void structsequenceref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void structsequenceref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }
}

namespace spd
{
}

// Begin epilogue.
//
//
// End epilogue.

