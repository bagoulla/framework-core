// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "profile-pskel.h"

namespace profile
{
  // profile_pskel
  //

  void profile_pskel::
  filename_parser (::xml_schema::string_pskel& p)
  {
    this->filename_parser_ = &p;
  }

  void profile_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void profile_pskel::
  parsers (::xml_schema::string_pskel& filename,
           ::xml_schema::string_pskel& type)
  {
    this->filename_parser_ = &filename;
    this->type_parser_ = &type;
  }

  profile_pskel::
  profile_pskel ()
  : filename_parser_ (0),
    type_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }
}

namespace profile
{
  // profile_pskel
  //

  void profile_pskel::
  filename (const ::std::string&)
  {
  }

  void profile_pskel::
  type (const ::std::string&)
  {
  }

  void profile_pskel::
  post_profile ()
  {
  }
}

#include <cassert>

namespace profile
{
}

namespace profile
{
  // Attribute validation and dispatch functions for profile_pskel.
  //
  bool profile_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "filename" && ns.empty ())
    {
      if (this->filename_parser_)
      {
        this->filename_parser_->pre ();
        this->filename_parser_->_pre_impl ();
        this->filename_parser_->_characters (s);
        this->filename_parser_->_post_impl ();
        const ::std::string& tmp (this->filename_parser_->post_string ());
        this->filename (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->filename = true;
      return true;
    }

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_string ());
        this->type (tmp);
      }

      return true;
    }

    return false;
  }

  void profile_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.filename = false;
  }

  void profile_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.filename)
      this->_expected_attribute (
        "", "filename");

    this->v_state_attr_stack_.pop ();
  }
}

namespace profile
{
}

// Begin epilogue.
//
//
// End epilogue.

