// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "dcd-pskel.h"

namespace dcd
{
  // deviceconfiguration_pskel
  //

  void deviceconfiguration_pskel::
  description_parser (::xml_schema::string_pskel& p)
  {
    this->description_parser_ = &p;
  }

  void deviceconfiguration_pskel::
  devicemanagersoftpkg_parser (::dcd::devicemanagersoftpkg_pskel& p)
  {
    this->devicemanagersoftpkg_parser_ = &p;
  }

  void deviceconfiguration_pskel::
  componentfiles_parser (::dcd::componentfiles_pskel& p)
  {
    this->componentfiles_parser_ = &p;
  }

  void deviceconfiguration_pskel::
  partitioning_parser (::dcd::partitioning_pskel& p)
  {
    this->partitioning_parser_ = &p;
  }

  void deviceconfiguration_pskel::
  connections_parser (::dcd::connections_pskel& p)
  {
    this->connections_parser_ = &p;
  }

  void deviceconfiguration_pskel::
  domainmanager_parser (::dcd::domainmanager_pskel& p)
  {
    this->domainmanager_parser_ = &p;
  }

  void deviceconfiguration_pskel::
  filesystemnames_parser (::dcd::filesystemnames_pskel& p)
  {
    this->filesystemnames_parser_ = &p;
  }

  void deviceconfiguration_pskel::
  id_parser (::xml_schema::string_pskel& p)
  {
    this->id_parser_ = &p;
  }

  void deviceconfiguration_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void deviceconfiguration_pskel::
  parsers (::xml_schema::string_pskel& description,
           ::dcd::devicemanagersoftpkg_pskel& devicemanagersoftpkg,
           ::dcd::componentfiles_pskel& componentfiles,
           ::dcd::partitioning_pskel& partitioning,
           ::dcd::connections_pskel& connections,
           ::dcd::domainmanager_pskel& domainmanager,
           ::dcd::filesystemnames_pskel& filesystemnames,
           ::xml_schema::string_pskel& id,
           ::xml_schema::string_pskel& name)
  {
    this->description_parser_ = &description;
    this->devicemanagersoftpkg_parser_ = &devicemanagersoftpkg;
    this->componentfiles_parser_ = &componentfiles;
    this->partitioning_parser_ = &partitioning;
    this->connections_parser_ = &connections;
    this->domainmanager_parser_ = &domainmanager;
    this->filesystemnames_parser_ = &filesystemnames;
    this->id_parser_ = &id;
    this->name_parser_ = &name;
  }

  deviceconfiguration_pskel::
  deviceconfiguration_pskel ()
  : description_parser_ (0),
    devicemanagersoftpkg_parser_ (0),
    componentfiles_parser_ (0),
    partitioning_parser_ (0),
    connections_parser_ (0),
    domainmanager_parser_ (0),
    filesystemnames_parser_ (0),
    id_parser_ (0),
    name_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // devicemanagersoftpkg_pskel
  //

  void devicemanagersoftpkg_pskel::
  localfile_parser (::dcd::localfile_pskel& p)
  {
    this->localfile_parser_ = &p;
  }

  void devicemanagersoftpkg_pskel::
  parsers (::dcd::localfile_pskel& localfile)
  {
    this->localfile_parser_ = &localfile;
  }

  devicemanagersoftpkg_pskel::
  devicemanagersoftpkg_pskel ()
  : localfile_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // componentfiles_pskel
  //

  void componentfiles_pskel::
  componentfile_parser (::dcd::componentfile_pskel& p)
  {
    this->componentfile_parser_ = &p;
  }

  void componentfiles_pskel::
  parsers (::dcd::componentfile_pskel& componentfile)
  {
    this->componentfile_parser_ = &componentfile;
  }

  componentfiles_pskel::
  componentfiles_pskel ()
  : componentfile_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // componentfile_pskel
  //

  void componentfile_pskel::
  localfile_parser (::dcd::localfile_pskel& p)
  {
    this->localfile_parser_ = &p;
  }

  void componentfile_pskel::
  id_parser (::xml_schema::string_pskel& p)
  {
    this->id_parser_ = &p;
  }

  void componentfile_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void componentfile_pskel::
  parsers (::dcd::localfile_pskel& localfile,
           ::xml_schema::string_pskel& id,
           ::xml_schema::string_pskel& type)
  {
    this->localfile_parser_ = &localfile;
    this->id_parser_ = &id;
    this->type_parser_ = &type;
  }

  componentfile_pskel::
  componentfile_pskel ()
  : localfile_parser_ (0),
    id_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // localfile_pskel
  //

  void localfile_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void localfile_pskel::
  parsers (::xml_schema::string_pskel& name)
  {
    this->name_parser_ = &name;
  }

  localfile_pskel::
  localfile_pskel ()
  : name_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // partitioning_pskel
  //

  void partitioning_pskel::
  componentplacement_parser (::dcd::componentplacement_pskel& p)
  {
    this->componentplacement_parser_ = &p;
  }

  void partitioning_pskel::
  parsers (::dcd::componentplacement_pskel& componentplacement)
  {
    this->componentplacement_parser_ = &componentplacement;
  }

  partitioning_pskel::
  partitioning_pskel ()
  : componentplacement_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // componentplacement_pskel
  //

  void componentplacement_pskel::
  componentfileref_parser (::dcd::componentfileref_pskel& p)
  {
    this->componentfileref_parser_ = &p;
  }

  void componentplacement_pskel::
  deployondevice_parser (::dcd::deployondevice_pskel& p)
  {
    this->deployondevice_parser_ = &p;
  }

  void componentplacement_pskel::
  compositepartofdevice_parser (::dcd::compositepartofdevice_pskel& p)
  {
    this->compositepartofdevice_parser_ = &p;
  }

  void componentplacement_pskel::
  devicepkgfile_parser (::dcd::devicepkgfile_pskel& p)
  {
    this->devicepkgfile_parser_ = &p;
  }

  void componentplacement_pskel::
  componentinstantiation_parser (::dcd::componentinstantiation_pskel& p)
  {
    this->componentinstantiation_parser_ = &p;
  }

  void componentplacement_pskel::
  parsers (::dcd::componentfileref_pskel& componentfileref,
           ::dcd::deployondevice_pskel& deployondevice,
           ::dcd::compositepartofdevice_pskel& compositepartofdevice,
           ::dcd::devicepkgfile_pskel& devicepkgfile,
           ::dcd::componentinstantiation_pskel& componentinstantiation)
  {
    this->componentfileref_parser_ = &componentfileref;
    this->deployondevice_parser_ = &deployondevice;
    this->compositepartofdevice_parser_ = &compositepartofdevice;
    this->devicepkgfile_parser_ = &devicepkgfile;
    this->componentinstantiation_parser_ = &componentinstantiation;
  }

  componentplacement_pskel::
  componentplacement_pskel ()
  : componentfileref_parser_ (0),
    deployondevice_parser_ (0),
    compositepartofdevice_parser_ (0),
    devicepkgfile_parser_ (0),
    componentinstantiation_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // componentfileref_pskel
  //

  void componentfileref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void componentfileref_pskel::
  parsers (::xml_schema::string_pskel& refid)
  {
    this->refid_parser_ = &refid;
  }

  componentfileref_pskel::
  componentfileref_pskel ()
  : refid_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // deployondevice_pskel
  //

  void deployondevice_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void deployondevice_pskel::
  parsers (::xml_schema::string_pskel& refid)
  {
    this->refid_parser_ = &refid;
  }

  deployondevice_pskel::
  deployondevice_pskel ()
  : refid_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // compositepartofdevice_pskel
  //

  void compositepartofdevice_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void compositepartofdevice_pskel::
  parsers (::xml_schema::string_pskel& refid)
  {
    this->refid_parser_ = &refid;
  }

  compositepartofdevice_pskel::
  compositepartofdevice_pskel ()
  : refid_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // devicepkgfile_pskel
  //

  void devicepkgfile_pskel::
  localfile_parser (::dcd::localfile_pskel& p)
  {
    this->localfile_parser_ = &p;
  }

  void devicepkgfile_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void devicepkgfile_pskel::
  parsers (::dcd::localfile_pskel& localfile,
           ::xml_schema::string_pskel& type)
  {
    this->localfile_parser_ = &localfile;
    this->type_parser_ = &type;
  }

  devicepkgfile_pskel::
  devicepkgfile_pskel ()
  : localfile_parser_ (0),
    type_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // componentinstantiation_pskel
  //

  void componentinstantiation_pskel::
  usagename_parser (::xml_schema::string_pskel& p)
  {
    this->usagename_parser_ = &p;
  }

  void componentinstantiation_pskel::
  componentproperties_parser (::dcd::componentproperties_pskel& p)
  {
    this->componentproperties_parser_ = &p;
  }

  void componentinstantiation_pskel::
  id_parser (::xml_schema::string_pskel& p)
  {
    this->id_parser_ = &p;
  }

  void componentinstantiation_pskel::
  parsers (::xml_schema::string_pskel& usagename,
           ::dcd::componentproperties_pskel& componentproperties,
           ::xml_schema::string_pskel& id)
  {
    this->usagename_parser_ = &usagename;
    this->componentproperties_parser_ = &componentproperties;
    this->id_parser_ = &id;
  }

  componentinstantiation_pskel::
  componentinstantiation_pskel ()
  : usagename_parser_ (0),
    componentproperties_parser_ (0),
    id_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // componentproperties_pskel
  //

  void componentproperties_pskel::
  simpleref_parser (::dcd::simpleref_pskel& p)
  {
    this->simpleref_parser_ = &p;
  }

  void componentproperties_pskel::
  simplesequenceref_parser (::dcd::simplesequenceref_pskel& p)
  {
    this->simplesequenceref_parser_ = &p;
  }

  void componentproperties_pskel::
  structref_parser (::dcd::structref_pskel& p)
  {
    this->structref_parser_ = &p;
  }

  void componentproperties_pskel::
  structsequenceref_parser (::dcd::structsequenceref_pskel& p)
  {
    this->structsequenceref_parser_ = &p;
  }

  void componentproperties_pskel::
  parsers (::dcd::simpleref_pskel& simpleref,
           ::dcd::simplesequenceref_pskel& simplesequenceref,
           ::dcd::structref_pskel& structref,
           ::dcd::structsequenceref_pskel& structsequenceref)
  {
    this->simpleref_parser_ = &simpleref;
    this->simplesequenceref_parser_ = &simplesequenceref;
    this->structref_parser_ = &structref;
    this->structsequenceref_parser_ = &structsequenceref;
  }

  componentproperties_pskel::
  componentproperties_pskel ()
  : simpleref_parser_ (0),
    simplesequenceref_parser_ (0),
    structref_parser_ (0),
    structsequenceref_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // devicethatloadedthiscomponentref_pskel
  //

  void devicethatloadedthiscomponentref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void devicethatloadedthiscomponentref_pskel::
  parsers (::xml_schema::string_pskel& refid)
  {
    this->refid_parser_ = &refid;
  }

  devicethatloadedthiscomponentref_pskel::
  devicethatloadedthiscomponentref_pskel ()
  : refid_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // deviceusedbythiscomponentref_pskel
  //

  void deviceusedbythiscomponentref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void deviceusedbythiscomponentref_pskel::
  usesrefid_parser (::xml_schema::string_pskel& p)
  {
    this->usesrefid_parser_ = &p;
  }

  void deviceusedbythiscomponentref_pskel::
  parsers (::xml_schema::string_pskel& refid,
           ::xml_schema::string_pskel& usesrefid)
  {
    this->refid_parser_ = &refid;
    this->usesrefid_parser_ = &usesrefid;
  }

  deviceusedbythiscomponentref_pskel::
  deviceusedbythiscomponentref_pskel ()
  : refid_parser_ (0),
    usesrefid_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // simpleref_pskel
  //

  void simpleref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void simpleref_pskel::
  value_parser (::xml_schema::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void simpleref_pskel::
  parsers (::xml_schema::string_pskel& refid,
           ::xml_schema::string_pskel& value)
  {
    this->refid_parser_ = &refid;
    this->value_parser_ = &value;
  }

  simpleref_pskel::
  simpleref_pskel ()
  : refid_parser_ (0),
    value_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // simplesequenceref_pskel
  //

  void simplesequenceref_pskel::
  values_parser (::dcd::values_pskel& p)
  {
    this->values_parser_ = &p;
  }

  void simplesequenceref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void simplesequenceref_pskel::
  parsers (::dcd::values_pskel& values,
           ::xml_schema::string_pskel& refid)
  {
    this->values_parser_ = &values;
    this->refid_parser_ = &refid;
  }

  simplesequenceref_pskel::
  simplesequenceref_pskel ()
  : values_parser_ (0),
    refid_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // structref_pskel
  //

  void structref_pskel::
  simpleref_parser (::dcd::simpleref_pskel& p)
  {
    this->simpleref_parser_ = &p;
  }

  void structref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void structref_pskel::
  parsers (::dcd::simpleref_pskel& simpleref,
           ::xml_schema::string_pskel& refid)
  {
    this->simpleref_parser_ = &simpleref;
    this->refid_parser_ = &refid;
  }

  structref_pskel::
  structref_pskel ()
  : simpleref_parser_ (0),
    refid_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // structsequenceref_pskel
  //

  void structsequenceref_pskel::
  structvalue_parser (::dcd::structvalue_pskel& p)
  {
    this->structvalue_parser_ = &p;
  }

  void structsequenceref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void structsequenceref_pskel::
  parsers (::dcd::structvalue_pskel& structvalue,
           ::xml_schema::string_pskel& refid)
  {
    this->structvalue_parser_ = &structvalue;
    this->refid_parser_ = &refid;
  }

  structsequenceref_pskel::
  structsequenceref_pskel ()
  : structvalue_parser_ (0),
    refid_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // structvalue_pskel
  //

  void structvalue_pskel::
  simpleref_parser (::dcd::simpleref_pskel& p)
  {
    this->simpleref_parser_ = &p;
  }

  void structvalue_pskel::
  parsers (::dcd::simpleref_pskel& simpleref)
  {
    this->simpleref_parser_ = &simpleref;
  }

  structvalue_pskel::
  structvalue_pskel ()
  : simpleref_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // values_pskel
  //

  void values_pskel::
  value_parser (::xml_schema::string_pskel& p)
  {
    this->value_parser_ = &p;
  }

  void values_pskel::
  parsers (::xml_schema::string_pskel& value)
  {
    this->value_parser_ = &value;
  }

  values_pskel::
  values_pskel ()
  : value_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // componentinstantiationref_pskel
  //

  void componentinstantiationref_pskel::
  refid_parser (::xml_schema::string_pskel& p)
  {
    this->refid_parser_ = &p;
  }

  void componentinstantiationref_pskel::
  parsers (::xml_schema::string_pskel& refid)
  {
    this->refid_parser_ = &refid;
  }

  componentinstantiationref_pskel::
  componentinstantiationref_pskel ()
  : refid_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // domainmanager_pskel
  //

  void domainmanager_pskel::
  namingservice_parser (::dcd::namingservice_pskel& p)
  {
    this->namingservice_parser_ = &p;
  }

  void domainmanager_pskel::
  stringifiedobjectref_parser (::xml_schema::string_pskel& p)
  {
    this->stringifiedobjectref_parser_ = &p;
  }

  void domainmanager_pskel::
  parsers (::dcd::namingservice_pskel& namingservice,
           ::xml_schema::string_pskel& stringifiedobjectref)
  {
    this->namingservice_parser_ = &namingservice;
    this->stringifiedobjectref_parser_ = &stringifiedobjectref;
  }

  domainmanager_pskel::
  domainmanager_pskel ()
  : namingservice_parser_ (0),
    stringifiedobjectref_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // findby_pskel
  //

  void findby_pskel::
  namingservice_parser (::dcd::namingservice_pskel& p)
  {
    this->namingservice_parser_ = &p;
  }

  void findby_pskel::
  stringifiedobjectref_parser (::xml_schema::string_pskel& p)
  {
    this->stringifiedobjectref_parser_ = &p;
  }

  void findby_pskel::
  domainfinder_parser (::dcd::domainfinder_pskel& p)
  {
    this->domainfinder_parser_ = &p;
  }

  void findby_pskel::
  parsers (::dcd::namingservice_pskel& namingservice,
           ::xml_schema::string_pskel& stringifiedobjectref,
           ::dcd::domainfinder_pskel& domainfinder)
  {
    this->namingservice_parser_ = &namingservice;
    this->stringifiedobjectref_parser_ = &stringifiedobjectref;
    this->domainfinder_parser_ = &domainfinder;
  }

  findby_pskel::
  findby_pskel ()
  : namingservice_parser_ (0),
    stringifiedobjectref_parser_ (0),
    domainfinder_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // namingservice_pskel
  //

  void namingservice_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void namingservice_pskel::
  parsers (::xml_schema::string_pskel& name)
  {
    this->name_parser_ = &name;
  }

  namingservice_pskel::
  namingservice_pskel ()
  : name_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // domainfinder_pskel
  //

  void domainfinder_pskel::
  type_parser (::xml_schema::string_pskel& p)
  {
    this->type_parser_ = &p;
  }

  void domainfinder_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void domainfinder_pskel::
  parsers (::xml_schema::string_pskel& type,
           ::xml_schema::string_pskel& name)
  {
    this->type_parser_ = &type;
    this->name_parser_ = &name;
  }

  domainfinder_pskel::
  domainfinder_pskel ()
  : type_parser_ (0),
    name_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // filesystemnames_pskel
  //

  void filesystemnames_pskel::
  filesystemname_parser (::dcd::filesystemname_pskel& p)
  {
    this->filesystemname_parser_ = &p;
  }

  void filesystemnames_pskel::
  parsers (::dcd::filesystemname_pskel& filesystemname)
  {
    this->filesystemname_parser_ = &filesystemname;
  }

  filesystemnames_pskel::
  filesystemnames_pskel ()
  : filesystemname_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // filesystemname_pskel
  //

  void filesystemname_pskel::
  mountname_parser (::xml_schema::string_pskel& p)
  {
    this->mountname_parser_ = &p;
  }

  void filesystemname_pskel::
  deviceid_parser (::xml_schema::string_pskel& p)
  {
    this->deviceid_parser_ = &p;
  }

  void filesystemname_pskel::
  parsers (::xml_schema::string_pskel& mountname,
           ::xml_schema::string_pskel& deviceid)
  {
    this->mountname_parser_ = &mountname;
    this->deviceid_parser_ = &deviceid;
  }

  filesystemname_pskel::
  filesystemname_pskel ()
  : mountname_parser_ (0),
    deviceid_parser_ (0),
    v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
  {
  }

  // connections_pskel
  //

  void connections_pskel::
  connectinterface_parser (::dcd::connectinterface_pskel& p)
  {
    this->connectinterface_parser_ = &p;
  }

  void connections_pskel::
  parsers (::dcd::connectinterface_pskel& connectinterface)
  {
    this->connectinterface_parser_ = &connectinterface;
  }

  connections_pskel::
  connections_pskel ()
  : connectinterface_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // connectinterface_pskel
  //

  void connectinterface_pskel::
  usesport_parser (::dcd::usesport_pskel& p)
  {
    this->usesport_parser_ = &p;
  }

  void connectinterface_pskel::
  providesport_parser (::dcd::providesport_pskel& p)
  {
    this->providesport_parser_ = &p;
  }

  void connectinterface_pskel::
  componentsupportedinterface_parser (::dcd::componentsupportedinterface_pskel& p)
  {
    this->componentsupportedinterface_parser_ = &p;
  }

  void connectinterface_pskel::
  findby_parser (::dcd::findby_pskel& p)
  {
    this->findby_parser_ = &p;
  }

  void connectinterface_pskel::
  id_parser (::xml_schema::string_pskel& p)
  {
    this->id_parser_ = &p;
  }

  void connectinterface_pskel::
  parsers (::dcd::usesport_pskel& usesport,
           ::dcd::providesport_pskel& providesport,
           ::dcd::componentsupportedinterface_pskel& componentsupportedinterface,
           ::dcd::findby_pskel& findby,
           ::xml_schema::string_pskel& id)
  {
    this->usesport_parser_ = &usesport;
    this->providesport_parser_ = &providesport;
    this->componentsupportedinterface_parser_ = &componentsupportedinterface;
    this->findby_parser_ = &findby;
    this->id_parser_ = &id;
  }

  connectinterface_pskel::
  connectinterface_pskel ()
  : usesport_parser_ (0),
    providesport_parser_ (0),
    componentsupportedinterface_parser_ (0),
    findby_parser_ (0),
    id_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // usesport_pskel
  //

  void usesport_pskel::
  usesidentifier_parser (::xml_schema::string_pskel& p)
  {
    this->usesidentifier_parser_ = &p;
  }

  void usesport_pskel::
  componentinstantiationref_parser (::dcd::componentinstantiationref_pskel& p)
  {
    this->componentinstantiationref_parser_ = &p;
  }

  void usesport_pskel::
  devicethatloadedthiscomponentref_parser (::dcd::devicethatloadedthiscomponentref_pskel& p)
  {
    this->devicethatloadedthiscomponentref_parser_ = &p;
  }

  void usesport_pskel::
  deviceusedbythiscomponentref_parser (::dcd::deviceusedbythiscomponentref_pskel& p)
  {
    this->deviceusedbythiscomponentref_parser_ = &p;
  }

  void usesport_pskel::
  findby_parser (::dcd::findby_pskel& p)
  {
    this->findby_parser_ = &p;
  }

  void usesport_pskel::
  parsers (::xml_schema::string_pskel& usesidentifier,
           ::dcd::componentinstantiationref_pskel& componentinstantiationref,
           ::dcd::devicethatloadedthiscomponentref_pskel& devicethatloadedthiscomponentref,
           ::dcd::deviceusedbythiscomponentref_pskel& deviceusedbythiscomponentref,
           ::dcd::findby_pskel& findby)
  {
    this->usesidentifier_parser_ = &usesidentifier;
    this->componentinstantiationref_parser_ = &componentinstantiationref;
    this->devicethatloadedthiscomponentref_parser_ = &devicethatloadedthiscomponentref;
    this->deviceusedbythiscomponentref_parser_ = &deviceusedbythiscomponentref;
    this->findby_parser_ = &findby;
  }

  usesport_pskel::
  usesport_pskel ()
  : usesidentifier_parser_ (0),
    componentinstantiationref_parser_ (0),
    devicethatloadedthiscomponentref_parser_ (0),
    deviceusedbythiscomponentref_parser_ (0),
    findby_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // providesport_pskel
  //

  void providesport_pskel::
  providesidentifier_parser (::xml_schema::string_pskel& p)
  {
    this->providesidentifier_parser_ = &p;
  }

  void providesport_pskel::
  componentinstantiationref_parser (::dcd::componentinstantiationref_pskel& p)
  {
    this->componentinstantiationref_parser_ = &p;
  }

  void providesport_pskel::
  devicethatloadedthiscomponentref_parser (::dcd::devicethatloadedthiscomponentref_pskel& p)
  {
    this->devicethatloadedthiscomponentref_parser_ = &p;
  }

  void providesport_pskel::
  deviceusedbythiscomponentref_parser (::dcd::deviceusedbythiscomponentref_pskel& p)
  {
    this->deviceusedbythiscomponentref_parser_ = &p;
  }

  void providesport_pskel::
  findby_parser (::dcd::findby_pskel& p)
  {
    this->findby_parser_ = &p;
  }

  void providesport_pskel::
  parsers (::xml_schema::string_pskel& providesidentifier,
           ::dcd::componentinstantiationref_pskel& componentinstantiationref,
           ::dcd::devicethatloadedthiscomponentref_pskel& devicethatloadedthiscomponentref,
           ::dcd::deviceusedbythiscomponentref_pskel& deviceusedbythiscomponentref,
           ::dcd::findby_pskel& findby)
  {
    this->providesidentifier_parser_ = &providesidentifier;
    this->componentinstantiationref_parser_ = &componentinstantiationref;
    this->devicethatloadedthiscomponentref_parser_ = &devicethatloadedthiscomponentref;
    this->deviceusedbythiscomponentref_parser_ = &deviceusedbythiscomponentref;
    this->findby_parser_ = &findby;
  }

  providesport_pskel::
  providesport_pskel ()
  : providesidentifier_parser_ (0),
    componentinstantiationref_parser_ (0),
    devicethatloadedthiscomponentref_parser_ (0),
    deviceusedbythiscomponentref_parser_ (0),
    findby_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }

  // componentsupportedinterface_pskel
  //

  void componentsupportedinterface_pskel::
  supportedidentifier_parser (::xml_schema::string_pskel& p)
  {
    this->supportedidentifier_parser_ = &p;
  }

  void componentsupportedinterface_pskel::
  componentinstantiationref_parser (::dcd::componentinstantiationref_pskel& p)
  {
    this->componentinstantiationref_parser_ = &p;
  }

  void componentsupportedinterface_pskel::
  findby_parser (::dcd::findby_pskel& p)
  {
    this->findby_parser_ = &p;
  }

  void componentsupportedinterface_pskel::
  parsers (::xml_schema::string_pskel& supportedidentifier,
           ::dcd::componentinstantiationref_pskel& componentinstantiationref,
           ::dcd::findby_pskel& findby)
  {
    this->supportedidentifier_parser_ = &supportedidentifier;
    this->componentinstantiationref_parser_ = &componentinstantiationref;
    this->findby_parser_ = &findby;
  }

  componentsupportedinterface_pskel::
  componentsupportedinterface_pskel ()
  : supportedidentifier_parser_ (0),
    componentinstantiationref_parser_ (0),
    findby_parser_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

namespace dcd
{
  // deviceconfiguration_pskel
  //

  void deviceconfiguration_pskel::
  description (const ::std::string&)
  {
  }

  void deviceconfiguration_pskel::
  devicemanagersoftpkg (const ::std::string&)
  {
  }

  void deviceconfiguration_pskel::
  componentfiles (const ::std::vector<ossie::ComponentFile>&)
  {
  }

  void deviceconfiguration_pskel::
  partitioning (const ::std::vector<ossie::ComponentPlacement>&)
  {
  }

  void deviceconfiguration_pskel::
  connections (const ::std::vector<ossie::Connection>&)
  {
  }

  void deviceconfiguration_pskel::
  domainmanager (const ::std::string&)
  {
  }

  void deviceconfiguration_pskel::
  filesystemnames ()
  {
  }

  void deviceconfiguration_pskel::
  id (const ::std::string&)
  {
  }

  void deviceconfiguration_pskel::
  name (const ::std::string&)
  {
  }

  // devicemanagersoftpkg_pskel
  //

  void devicemanagersoftpkg_pskel::
  localfile (const ::std::string&)
  {
  }

  // componentfiles_pskel
  //

  void componentfiles_pskel::
  componentfile (const ::ossie::ComponentFile&)
  {
  }

  // componentfile_pskel
  //

  void componentfile_pskel::
  localfile (const ::std::string&)
  {
  }

  void componentfile_pskel::
  id (const ::std::string&)
  {
  }

  void componentfile_pskel::
  type (const ::std::string&)
  {
  }

  // localfile_pskel
  //

  void localfile_pskel::
  name (const ::std::string&)
  {
  }

  // partitioning_pskel
  //

  void partitioning_pskel::
  componentplacement (const ::ossie::ComponentPlacement&)
  {
  }

  // componentplacement_pskel
  //

  void componentplacement_pskel::
  componentfileref (const ::std::string&)
  {
  }

  void componentplacement_pskel::
  deployondevice (const ::std::string&)
  {
  }

  void componentplacement_pskel::
  compositepartofdevice (const ::std::string&)
  {
  }

  void componentplacement_pskel::
  devicepkgfile ()
  {
  }

  void componentplacement_pskel::
  componentinstantiation (const ::ossie::ComponentInstantiation&)
  {
  }

  // componentfileref_pskel
  //

  void componentfileref_pskel::
  refid (const ::std::string&)
  {
  }

  // deployondevice_pskel
  //

  void deployondevice_pskel::
  refid (const ::std::string&)
  {
  }

  // compositepartofdevice_pskel
  //

  void compositepartofdevice_pskel::
  refid (const ::std::string&)
  {
  }

  // devicepkgfile_pskel
  //

  void devicepkgfile_pskel::
  localfile (const ::std::string&)
  {
  }

  void devicepkgfile_pskel::
  type (const ::std::string&)
  {
  }

  void devicepkgfile_pskel::
  post_devicepkgfile ()
  {
  }

  // componentinstantiation_pskel
  //

  void componentinstantiation_pskel::
  usagename (const ::std::string&)
  {
  }

  void componentinstantiation_pskel::
  componentproperties (const ::std::vector<ossie::ComponentProperty*>&)
  {
  }

  void componentinstantiation_pskel::
  id (const ::std::string&)
  {
  }

  // componentproperties_pskel
  //

  void componentproperties_pskel::
  simpleref (ossie::SimplePropertyRef*)
  {
  }

  void componentproperties_pskel::
  simplesequenceref (ossie::SimpleSequencePropertyRef*)
  {
  }

  void componentproperties_pskel::
  structref (ossie::StructPropertyRef*)
  {
  }

  void componentproperties_pskel::
  structsequenceref (ossie::StructSequencePropertyRef*)
  {
  }

  // devicethatloadedthiscomponentref_pskel
  //

  void devicethatloadedthiscomponentref_pskel::
  refid (const ::std::string&)
  {
  }

  // deviceusedbythiscomponentref_pskel
  //

  void deviceusedbythiscomponentref_pskel::
  refid (const ::std::string&)
  {
  }

  void deviceusedbythiscomponentref_pskel::
  usesrefid (const ::std::string&)
  {
  }

  // simpleref_pskel
  //

  void simpleref_pskel::
  refid (const ::std::string&)
  {
  }

  void simpleref_pskel::
  value (const ::std::string&)
  {
  }

  // simplesequenceref_pskel
  //

  void simplesequenceref_pskel::
  values (const ::std::vector<std::string>&)
  {
  }

  void simplesequenceref_pskel::
  refid (const ::std::string&)
  {
  }

  // structref_pskel
  //

  void structref_pskel::
  simpleref (ossie::SimplePropertyRef*)
  {
  }

  void structref_pskel::
  refid (const ::std::string&)
  {
  }

  // structsequenceref_pskel
  //

  void structsequenceref_pskel::
  structvalue (const ::std::map<std::string, std::string>&)
  {
  }

  void structsequenceref_pskel::
  refid (const ::std::string&)
  {
  }

  // structvalue_pskel
  //

  void structvalue_pskel::
  simpleref (ossie::SimplePropertyRef*)
  {
  }

  // values_pskel
  //

  void values_pskel::
  value (const ::std::string&)
  {
  }

  // componentinstantiationref_pskel
  //

  void componentinstantiationref_pskel::
  refid (const ::std::string&)
  {
  }

  // domainmanager_pskel
  //

  void domainmanager_pskel::
  namingservice (const ::std::string&)
  {
  }

  void domainmanager_pskel::
  stringifiedobjectref (const ::std::string&)
  {
  }

  // findby_pskel
  //

  void findby_pskel::
  namingservice (const ::std::string&)
  {
  }

  void findby_pskel::
  stringifiedobjectref (const ::std::string&)
  {
  }

  void findby_pskel::
  domainfinder (const ::std::pair<std::string, std::string>&)
  {
  }

  // namingservice_pskel
  //

  void namingservice_pskel::
  name (const ::std::string&)
  {
  }

  // domainfinder_pskel
  //

  void domainfinder_pskel::
  type (const ::std::string&)
  {
  }

  void domainfinder_pskel::
  name (const ::std::string&)
  {
  }

  // filesystemnames_pskel
  //

  void filesystemnames_pskel::
  filesystemname ()
  {
  }

  void filesystemnames_pskel::
  post_filesystemnames ()
  {
  }

  // filesystemname_pskel
  //

  void filesystemname_pskel::
  mountname (const ::std::string&)
  {
  }

  void filesystemname_pskel::
  deviceid (const ::std::string&)
  {
  }

  void filesystemname_pskel::
  post_filesystemname ()
  {
  }

  // connections_pskel
  //

  void connections_pskel::
  connectinterface (const ::ossie::Connection&)
  {
  }

  // connectinterface_pskel
  //

  void connectinterface_pskel::
  usesport (const ::ossie::UsesPort&)
  {
  }

  void connectinterface_pskel::
  providesport (const ::ossie::ProvidesPort&)
  {
  }

  void connectinterface_pskel::
  componentsupportedinterface (const ::ossie::ComponentSupportedInterface&)
  {
  }

  void connectinterface_pskel::
  findby (const ::ossie::FindBy&)
  {
  }

  void connectinterface_pskel::
  id (const ::std::string&)
  {
  }

  // usesport_pskel
  //

  void usesport_pskel::
  usesidentifier (const ::std::string&)
  {
  }

  void usesport_pskel::
  componentinstantiationref (const ::std::string&)
  {
  }

  void usesport_pskel::
  devicethatloadedthiscomponentref (const ::std::string&)
  {
  }

  void usesport_pskel::
  deviceusedbythiscomponentref (const ::std::pair<std::string, std::string>&)
  {
  }

  void usesport_pskel::
  findby (const ::ossie::FindBy&)
  {
  }

  // providesport_pskel
  //

  void providesport_pskel::
  providesidentifier (const ::std::string&)
  {
  }

  void providesport_pskel::
  componentinstantiationref (const ::std::string&)
  {
  }

  void providesport_pskel::
  devicethatloadedthiscomponentref (const ::std::string&)
  {
  }

  void providesport_pskel::
  deviceusedbythiscomponentref (const ::std::pair<std::string, std::string>&)
  {
  }

  void providesport_pskel::
  findby (const ::ossie::FindBy&)
  {
  }

  // componentsupportedinterface_pskel
  //

  void componentsupportedinterface_pskel::
  supportedidentifier (const ::std::string&)
  {
  }

  void componentsupportedinterface_pskel::
  componentinstantiationref (const ::std::string&)
  {
  }

  void componentsupportedinterface_pskel::
  findby (const ::ossie::FindBy&)
  {
  }
}

#include <cassert>

namespace dcd
{
  // Element validation and dispatch functions for deviceconfiguration_pskel.
  //
  bool deviceconfiguration_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "description" &&
            ns.empty())
          s = 0UL;
        else if (n == "devicemanagersoftpkg" &&
                 ns.empty())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &deviceconfiguration_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "description",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool deviceconfiguration_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void deviceconfiguration_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void deviceconfiguration_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "description");

    this->v_state_stack_.pop ();
  }

  void deviceconfiguration_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "description" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->description_parser_;

            if (this->description_parser_)
              this->description_parser_->pre ();
          }
          else
          {
            if (this->description_parser_)
            {
              const ::std::string& tmp (this->description_parser_->post_string ());
              this->description (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "devicemanagersoftpkg" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->devicemanagersoftpkg_parser_;

            if (this->devicemanagersoftpkg_parser_)
              this->devicemanagersoftpkg_parser_->pre ();
          }
          else
          {
            if (this->devicemanagersoftpkg_parser_)
            {
              const ::std::string& tmp (this->devicemanagersoftpkg_parser_->post_devicemanagersoftpkg ());
              this->devicemanagersoftpkg (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "devicemanagersoftpkg",
              ns, n);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "componentfiles" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->componentfiles_parser_;

            if (this->componentfiles_parser_)
              this->componentfiles_parser_->pre ();
          }
          else
          {
            if (this->componentfiles_parser_)
            {
              const ::std::vector<ossie::ComponentFile>& tmp (this->componentfiles_parser_->post_componentfiles ());
              this->componentfiles (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "partitioning" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->partitioning_parser_;

            if (this->partitioning_parser_)
              this->partitioning_parser_->pre ();
          }
          else
          {
            if (this->partitioning_parser_)
            {
              const ::std::vector<ossie::ComponentPlacement>& tmp (this->partitioning_parser_->post_partitioning ());
              this->partitioning (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "connections" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->connections_parser_;

            if (this->connections_parser_)
              this->connections_parser_->pre ();
          }
          else
          {
            if (this->connections_parser_)
            {
              const ::std::vector<ossie::Connection>& tmp (this->connections_parser_->post_connections ());
              this->connections (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "domainmanager" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->domainmanager_parser_;

            if (this->domainmanager_parser_)
              this->domainmanager_parser_->pre ();
          }
          else
          {
            if (this->domainmanager_parser_)
            {
              const ::std::string& tmp (this->domainmanager_parser_->post_domainmanager ());
              this->domainmanager (tmp);
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "domainmanager",
              ns, n);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "filesystemnames" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->filesystemnames_parser_;

            if (this->filesystemnames_parser_)
              this->filesystemnames_parser_->pre ();
          }
          else
          {
            if (this->filesystemnames_parser_)
            {
              this->filesystemnames_parser_->post_filesystemnames ();
              this->filesystemnames ();
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for devicemanagersoftpkg_pskel.
  //
  bool devicemanagersoftpkg_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "localfile" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &devicemanagersoftpkg_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool devicemanagersoftpkg_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void devicemanagersoftpkg_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void devicemanagersoftpkg_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "localfile");

    this->v_state_stack_.pop ();
  }

  void devicemanagersoftpkg_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "localfile" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->localfile_parser_;

            if (this->localfile_parser_)
              this->localfile_parser_->pre ();
          }
          else
          {
            if (this->localfile_parser_)
            {
              const ::std::string& tmp (this->localfile_parser_->post_localfile ());
              this->localfile (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for componentfiles_pskel.
  //
  bool componentfiles_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "componentfile" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &componentfiles_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "componentfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool componentfiles_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void componentfiles_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void componentfiles_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "componentfile");

    this->v_state_stack_.pop ();
  }

  void componentfiles_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "componentfile" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->componentfile_parser_;

            if (this->componentfile_parser_)
              this->componentfile_parser_->pre ();
          }
          else
          {
            if (this->componentfile_parser_)
            {
              const ::ossie::ComponentFile& tmp (this->componentfile_parser_->post_componentfile ());
              this->componentfile (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "componentfile",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for componentfile_pskel.
  //
  bool componentfile_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "localfile" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &componentfile_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool componentfile_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void componentfile_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void componentfile_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "localfile");

    this->v_state_stack_.pop ();
  }

  void componentfile_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "localfile" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->localfile_parser_;

            if (this->localfile_parser_)
              this->localfile_parser_->pre ();
          }
          else
          {
            if (this->localfile_parser_)
            {
              const ::std::string& tmp (this->localfile_parser_->post_localfile ());
              this->localfile (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for partitioning_pskel.
  //
  bool partitioning_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "componentplacement" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &partitioning_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool partitioning_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void partitioning_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void partitioning_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void partitioning_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "componentplacement" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->componentplacement_parser_;

            if (this->componentplacement_parser_)
              this->componentplacement_parser_->pre ();
          }
          else
          {
            if (this->componentplacement_parser_)
            {
              const ::ossie::ComponentPlacement& tmp (this->componentplacement_parser_->post_componentplacement ());
              this->componentplacement (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for componentplacement_pskel.
  //
  bool componentplacement_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "componentfileref" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &componentplacement_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "componentfileref",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool componentplacement_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void componentplacement_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void componentplacement_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "componentfileref");

    this->v_state_stack_.pop ();
  }

  void componentplacement_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "componentfileref" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->componentfileref_parser_;

            if (this->componentfileref_parser_)
              this->componentfileref_parser_->pre ();
          }
          else
          {
            if (this->componentfileref_parser_)
            {
              const ::std::string& tmp (this->componentfileref_parser_->post_componentfileref ());
              this->componentfileref (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "componentfileref",
              ns, n);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "deployondevice" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->deployondevice_parser_;

            if (this->deployondevice_parser_)
              this->deployondevice_parser_->pre ();
          }
          else
          {
            if (this->deployondevice_parser_)
            {
              const ::std::string& tmp (this->deployondevice_parser_->post_deployondevice ());
              this->deployondevice (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "compositepartofdevice" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->compositepartofdevice_parser_;

            if (this->compositepartofdevice_parser_)
              this->compositepartofdevice_parser_->pre ();
          }
          else
          {
            if (this->compositepartofdevice_parser_)
            {
              const ::std::string& tmp (this->compositepartofdevice_parser_->post_compositepartofdevice ());
              this->compositepartofdevice (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "devicepkgfile" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->devicepkgfile_parser_;

            if (this->devicepkgfile_parser_)
              this->devicepkgfile_parser_->pre ();
          }
          else
          {
            if (this->devicepkgfile_parser_)
            {
              this->devicepkgfile_parser_->post_devicepkgfile ();
              this->devicepkgfile ();
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "componentinstantiation" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->componentinstantiation_parser_;

            if (this->componentinstantiation_parser_)
              this->componentinstantiation_parser_->pre ();
          }
          else
          {
            if (this->componentinstantiation_parser_)
            {
              const ::ossie::ComponentInstantiation& tmp (this->componentinstantiation_parser_->post_componentinstantiation ());
              this->componentinstantiation (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "componentinstantiation",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for devicepkgfile_pskel.
  //
  bool devicepkgfile_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "localfile" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &devicepkgfile_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool devicepkgfile_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void devicepkgfile_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void devicepkgfile_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "localfile");

    this->v_state_stack_.pop ();
  }

  void devicepkgfile_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "localfile" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->localfile_parser_;

            if (this->localfile_parser_)
              this->localfile_parser_->pre ();
          }
          else
          {
            if (this->localfile_parser_)
            {
              const ::std::string& tmp (this->localfile_parser_->post_localfile ());
              this->localfile (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "localfile",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for componentinstantiation_pskel.
  //
  bool componentinstantiation_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "usagename" &&
            ns.empty())
          s = 0UL;
        else if (n == "componentproperties" &&
                 ns.empty())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &componentinstantiation_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool componentinstantiation_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void componentinstantiation_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void componentinstantiation_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void componentinstantiation_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "usagename" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->usagename_parser_;

            if (this->usagename_parser_)
              this->usagename_parser_->pre ();
          }
          else
          {
            if (this->usagename_parser_)
            {
              const ::std::string& tmp (this->usagename_parser_->post_string ());
              this->usagename (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "componentproperties" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->componentproperties_parser_;

            if (this->componentproperties_parser_)
              this->componentproperties_parser_->pre ();
          }
          else
          {
            if (this->componentproperties_parser_)
            {
              const ::std::vector<ossie::ComponentProperty*>& tmp (this->componentproperties_parser_->post_componentproperties ());
              this->componentproperties (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for componentproperties_pskel.
  //
  bool componentproperties_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "simpleref" &&
            ns.empty())
          s = 0UL;
        else if (n == "simplesequenceref" &&
                 ns.empty())
          s = 1UL;
        else if (n == "structref" &&
                 ns.empty())
          s = 2UL;
        else if (n == "structsequenceref" &&
                 ns.empty())
          s = 3UL;

        if (s != ~0UL)
        {
          vd->count++;

          vd = vs.data + vs.size++;
          vd->func = &componentproperties_pskel::choice_0;
          vd->state = s;
          vd->count = 0;

          this->choice_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "simpleref",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool componentproperties_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void componentproperties_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void componentproperties_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "simpleref");

    this->v_state_stack_.pop ();
  }

  void componentproperties_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->simpleref_parser_;

          if (this->simpleref_parser_)
            this->simpleref_parser_->pre ();
        }
        else
        {
          if (this->simpleref_parser_)
          {
            ossie::SimplePropertyRef* tmp (this->simpleref_parser_->post_simpleref ());
            this->simpleref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->simplesequenceref_parser_;

          if (this->simplesequenceref_parser_)
            this->simplesequenceref_parser_->pre ();
        }
        else
        {
          if (this->simplesequenceref_parser_)
          {
            ossie::SimpleSequencePropertyRef* tmp (this->simplesequenceref_parser_->post_simplesequenceref ());
            this->simplesequenceref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 2UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->structref_parser_;

          if (this->structref_parser_)
            this->structref_parser_->pre ();
        }
        else
        {
          if (this->structref_parser_)
          {
            ossie::StructPropertyRef* tmp (this->structref_parser_->post_structref ());
            this->structref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 3UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->structsequenceref_parser_;

          if (this->structsequenceref_parser_)
            this->structsequenceref_parser_->pre ();
        }
        else
        {
          if (this->structsequenceref_parser_)
          {
            ossie::StructSequencePropertyRef* tmp (this->structsequenceref_parser_->post_structsequenceref ());
            this->structsequenceref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for simplesequenceref_pskel.
  //
  bool simplesequenceref_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "values" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &simplesequenceref_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "values",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool simplesequenceref_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void simplesequenceref_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void simplesequenceref_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "values");

    this->v_state_stack_.pop ();
  }

  void simplesequenceref_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "values" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->values_parser_;

            if (this->values_parser_)
              this->values_parser_->pre ();
          }
          else
          {
            if (this->values_parser_)
            {
              const ::std::vector<std::string>& tmp (this->values_parser_->post_values ());
              this->values (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "values",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for structref_pskel.
  //
  bool structref_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "simpleref" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &structref_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "simpleref",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool structref_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void structref_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void structref_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "simpleref");

    this->v_state_stack_.pop ();
  }

  void structref_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "simpleref" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->simpleref_parser_;

            if (this->simpleref_parser_)
              this->simpleref_parser_->pre ();
          }
          else
          {
            if (this->simpleref_parser_)
            {
              ossie::SimplePropertyRef* tmp (this->simpleref_parser_->post_simpleref ());
              this->simpleref (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "simpleref",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for structsequenceref_pskel.
  //
  bool structsequenceref_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "structvalue" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &structsequenceref_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "structvalue",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool structsequenceref_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void structsequenceref_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void structsequenceref_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "structvalue");

    this->v_state_stack_.pop ();
  }

  void structsequenceref_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "structvalue" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->structvalue_parser_;

            if (this->structvalue_parser_)
              this->structvalue_parser_->pre ();
          }
          else
          {
            if (this->structvalue_parser_)
            {
              const ::std::map<std::string, std::string>& tmp (this->structvalue_parser_->post_structvalue ());
              this->structvalue (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "structvalue",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for structvalue_pskel.
  //
  bool structvalue_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "simpleref" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &structvalue_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "simpleref",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool structvalue_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void structvalue_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void structvalue_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "simpleref");

    this->v_state_stack_.pop ();
  }

  void structvalue_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "simpleref" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->simpleref_parser_;

            if (this->simpleref_parser_)
              this->simpleref_parser_->pre ();
          }
          else
          {
            if (this->simpleref_parser_)
            {
              ossie::SimplePropertyRef* tmp (this->simpleref_parser_->post_simpleref ());
              this->simpleref (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "simpleref",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for values_pskel.
  //
  bool values_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "value" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &values_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "value",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool values_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void values_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void values_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "value");

    this->v_state_stack_.pop ();
  }

  void values_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "value" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->value_parser_;

            if (this->value_parser_)
              this->value_parser_->pre ();
          }
          else
          {
            if (this->value_parser_)
            {
              const ::std::string& tmp (this->value_parser_->post_string ());
              this->value (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "value",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for domainmanager_pskel.
  //
  bool domainmanager_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "namingservice" &&
            ns.empty())
          s = 0UL;
        else if (n == "stringifiedobjectref" &&
                 ns.empty())
          s = 1UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &domainmanager_pskel::choice_0;
          vd->state = s;
          vd->count = 0;

          this->choice_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "namingservice",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool domainmanager_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void domainmanager_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void domainmanager_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "namingservice");

    this->v_state_stack_.pop ();
  }

  void domainmanager_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->namingservice_parser_;

          if (this->namingservice_parser_)
            this->namingservice_parser_->pre ();
        }
        else
        {
          if (this->namingservice_parser_)
          {
            const ::std::string& tmp (this->namingservice_parser_->post_namingservice ());
            this->namingservice (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->stringifiedobjectref_parser_;

          if (this->stringifiedobjectref_parser_)
            this->stringifiedobjectref_parser_->pre ();
        }
        else
        {
          if (this->stringifiedobjectref_parser_)
          {
            const ::std::string& tmp (this->stringifiedobjectref_parser_->post_string ());
            this->stringifiedobjectref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for findby_pskel.
  //
  bool findby_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "namingservice" &&
            ns.empty())
          s = 0UL;
        else if (n == "stringifiedobjectref" &&
                 ns.empty())
          s = 1UL;
        else if (n == "domainfinder" &&
                 ns.empty())
          s = 2UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &findby_pskel::choice_0;
          vd->state = s;
          vd->count = 0;

          this->choice_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "namingservice",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool findby_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void findby_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void findby_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "namingservice");

    this->v_state_stack_.pop ();
  }

  void findby_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->namingservice_parser_;

          if (this->namingservice_parser_)
            this->namingservice_parser_->pre ();
        }
        else
        {
          if (this->namingservice_parser_)
          {
            const ::std::string& tmp (this->namingservice_parser_->post_namingservice ());
            this->namingservice (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->stringifiedobjectref_parser_;

          if (this->stringifiedobjectref_parser_)
            this->stringifiedobjectref_parser_->pre ();
        }
        else
        {
          if (this->stringifiedobjectref_parser_)
          {
            const ::std::string& tmp (this->stringifiedobjectref_parser_->post_string ());
            this->stringifiedobjectref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 2UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->domainfinder_parser_;

          if (this->domainfinder_parser_)
            this->domainfinder_parser_->pre ();
        }
        else
        {
          if (this->domainfinder_parser_)
          {
            const ::std::pair<std::string, std::string>& tmp (this->domainfinder_parser_->post_domainfinder ());
            this->domainfinder (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for filesystemnames_pskel.
  //
  bool filesystemnames_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "filesystemname" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &filesystemnames_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "filesystemname",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool filesystemnames_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void filesystemnames_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void filesystemnames_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "filesystemname");

    this->v_state_stack_.pop ();
  }

  void filesystemnames_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "filesystemname" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->filesystemname_parser_;

            if (this->filesystemname_parser_)
              this->filesystemname_parser_->pre ();
          }
          else
          {
            if (this->filesystemname_parser_)
            {
              this->filesystemname_parser_->post_filesystemname ();
              this->filesystemname ();
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "filesystemname",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for connections_pskel.
  //
  bool connections_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "connectinterface" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &connections_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool connections_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void connections_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void connections_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }


    this->v_state_stack_.pop ();
  }

  void connections_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "connectinterface" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->connectinterface_parser_;

            if (this->connectinterface_parser_)
              this->connectinterface_parser_->pre ();
          }
          else
          {
            if (this->connectinterface_parser_)
            {
              const ::ossie::Connection& tmp (this->connectinterface_parser_->post_connectinterface ());
              this->connectinterface (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  // Element validation and dispatch functions for connectinterface_pskel.
  //
  bool connectinterface_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "usesport" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &connectinterface_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "usesport",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool connectinterface_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void connectinterface_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void connectinterface_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "usesport");

    this->v_state_stack_.pop ();
  }

  void connectinterface_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "usesport" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->usesport_parser_;

            if (this->usesport_parser_)
              this->usesport_parser_->pre ();
          }
          else
          {
            if (this->usesport_parser_)
            {
              const ::ossie::UsesPort& tmp (this->usesport_parser_->post_usesport ());
              this->usesport (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "usesport",
              ns, n);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        unsigned long s (~0UL);

        if (n == "providesport" &&
            ns.empty())
          s = 0UL;
        else if (n == "componentsupportedinterface" &&
                 ns.empty())
          s = 1UL;
        else if (n == "findby" &&
                 ns.empty())
          s = 2UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = ~0UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &connectinterface_pskel::choice_0;
          vd.state = s;
          vd.count = 0;

          this->choice_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "providesport",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void connectinterface_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->providesport_parser_;

          if (this->providesport_parser_)
            this->providesport_parser_->pre ();
        }
        else
        {
          if (this->providesport_parser_)
          {
            const ::ossie::ProvidesPort& tmp (this->providesport_parser_->post_providesport ());
            this->providesport (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->componentsupportedinterface_parser_;

          if (this->componentsupportedinterface_parser_)
            this->componentsupportedinterface_parser_->pre ();
        }
        else
        {
          if (this->componentsupportedinterface_parser_)
          {
            const ::ossie::ComponentSupportedInterface& tmp (this->componentsupportedinterface_parser_->post_componentsupportedinterface ());
            this->componentsupportedinterface (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 2UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->findby_parser_;

          if (this->findby_parser_)
            this->findby_parser_->pre ();
        }
        else
        {
          if (this->findby_parser_)
          {
            const ::ossie::FindBy& tmp (this->findby_parser_->post_findby ());
            this->findby (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for usesport_pskel.
  //
  bool usesport_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "usesidentifier" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &usesport_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "usesidentifier",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool usesport_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void usesport_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void usesport_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "usesidentifier");

    this->v_state_stack_.pop ();
  }

  void usesport_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "usesidentifier" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->usesidentifier_parser_;

            if (this->usesidentifier_parser_)
              this->usesidentifier_parser_->pre ();
          }
          else
          {
            if (this->usesidentifier_parser_)
            {
              const ::std::string& tmp (this->usesidentifier_parser_->post_string ());
              this->usesidentifier (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "usesidentifier",
              ns, n);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        unsigned long s (~0UL);

        if (n == "componentinstantiationref" &&
            ns.empty())
          s = 0UL;
        else if (n == "devicethatloadedthiscomponentref" &&
                 ns.empty())
          s = 1UL;
        else if (n == "deviceusedbythiscomponentref" &&
                 ns.empty())
          s = 2UL;
        else if (n == "findby" &&
                 ns.empty())
          s = 3UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = ~0UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &usesport_pskel::choice_0;
          vd.state = s;
          vd.count = 0;

          this->choice_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "componentinstantiationref",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void usesport_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->componentinstantiationref_parser_;

          if (this->componentinstantiationref_parser_)
            this->componentinstantiationref_parser_->pre ();
        }
        else
        {
          if (this->componentinstantiationref_parser_)
          {
            const ::std::string& tmp (this->componentinstantiationref_parser_->post_componentinstantiationref ());
            this->componentinstantiationref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->devicethatloadedthiscomponentref_parser_;

          if (this->devicethatloadedthiscomponentref_parser_)
            this->devicethatloadedthiscomponentref_parser_->pre ();
        }
        else
        {
          if (this->devicethatloadedthiscomponentref_parser_)
          {
            const ::std::string& tmp (this->devicethatloadedthiscomponentref_parser_->post_devicethatloadedthiscomponentref ());
            this->devicethatloadedthiscomponentref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 2UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->deviceusedbythiscomponentref_parser_;

          if (this->deviceusedbythiscomponentref_parser_)
            this->deviceusedbythiscomponentref_parser_->pre ();
        }
        else
        {
          if (this->deviceusedbythiscomponentref_parser_)
          {
            const ::std::pair<std::string, std::string>& tmp (this->deviceusedbythiscomponentref_parser_->post_deviceusedbythiscomponentref ());
            this->deviceusedbythiscomponentref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 3UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->findby_parser_;

          if (this->findby_parser_)
            this->findby_parser_->pre ();
        }
        else
        {
          if (this->findby_parser_)
          {
            const ::ossie::FindBy& tmp (this->findby_parser_->post_findby ());
            this->findby (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for providesport_pskel.
  //
  bool providesport_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "providesidentifier" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &providesport_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "providesidentifier",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool providesport_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void providesport_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void providesport_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "providesidentifier");

    this->v_state_stack_.pop ();
  }

  void providesport_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "providesidentifier" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->providesidentifier_parser_;

            if (this->providesidentifier_parser_)
              this->providesidentifier_parser_->pre ();
          }
          else
          {
            if (this->providesidentifier_parser_)
            {
              const ::std::string& tmp (this->providesidentifier_parser_->post_string ());
              this->providesidentifier (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "providesidentifier",
              ns, n);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        unsigned long s (~0UL);

        if (n == "componentinstantiationref" &&
            ns.empty())
          s = 0UL;
        else if (n == "devicethatloadedthiscomponentref" &&
                 ns.empty())
          s = 1UL;
        else if (n == "deviceusedbythiscomponentref" &&
                 ns.empty())
          s = 2UL;
        else if (n == "findby" &&
                 ns.empty())
          s = 3UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = ~0UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &providesport_pskel::choice_0;
          vd.state = s;
          vd.count = 0;

          this->choice_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "componentinstantiationref",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void providesport_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->componentinstantiationref_parser_;

          if (this->componentinstantiationref_parser_)
            this->componentinstantiationref_parser_->pre ();
        }
        else
        {
          if (this->componentinstantiationref_parser_)
          {
            const ::std::string& tmp (this->componentinstantiationref_parser_->post_componentinstantiationref ());
            this->componentinstantiationref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->devicethatloadedthiscomponentref_parser_;

          if (this->devicethatloadedthiscomponentref_parser_)
            this->devicethatloadedthiscomponentref_parser_->pre ();
        }
        else
        {
          if (this->devicethatloadedthiscomponentref_parser_)
          {
            const ::std::string& tmp (this->devicethatloadedthiscomponentref_parser_->post_devicethatloadedthiscomponentref ());
            this->devicethatloadedthiscomponentref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 2UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->deviceusedbythiscomponentref_parser_;

          if (this->deviceusedbythiscomponentref_parser_)
            this->deviceusedbythiscomponentref_parser_->pre ();
        }
        else
        {
          if (this->deviceusedbythiscomponentref_parser_)
          {
            const ::std::pair<std::string, std::string>& tmp (this->deviceusedbythiscomponentref_parser_->post_deviceusedbythiscomponentref ());
            this->deviceusedbythiscomponentref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 3UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->findby_parser_;

          if (this->findby_parser_)
            this->findby_parser_->pre ();
        }
        else
        {
          if (this->findby_parser_)
          {
            const ::ossie::FindBy& tmp (this->findby_parser_->post_findby ());
            this->findby (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }

  // Element validation and dispatch functions for componentsupportedinterface_pskel.
  //
  bool componentsupportedinterface_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "supportedidentifier" &&
            ns.empty())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &componentsupportedinterface_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "supportedidentifier",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool componentsupportedinterface_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void componentsupportedinterface_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void componentsupportedinterface_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "supportedidentifier");

    this->v_state_stack_.pop ();
  }

  void componentsupportedinterface_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (n == "supportedidentifier" &&
            ns.empty())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->supportedidentifier_parser_;

            if (this->supportedidentifier_parser_)
              this->supportedidentifier_parser_->pre ();
          }
          else
          {
            if (this->supportedidentifier_parser_)
            {
              const ::std::string& tmp (this->supportedidentifier_parser_->post_string ());
              this->supportedidentifier (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "supportedidentifier",
              ns, n);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        unsigned long s (~0UL);

        if (n == "componentinstantiationref" &&
            ns.empty())
          s = 0UL;
        else if (n == "findby" &&
                 ns.empty())
          s = 1UL;

        if (s != ~0UL)
        {
          assert (start);
          count = 0;
          state = ~0UL;

          v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
          v_state_descr_& vd = vs.data[vs.size++];

          vd.func = &componentsupportedinterface_pskel::choice_0;
          vd.state = s;
          vd.count = 0;

          this->choice_0 (vd.state, vd.count, ns, n, t, true);
          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "componentinstantiationref",
              ns, n);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }

  void componentsupportedinterface_pskel::
  choice_0 (unsigned long& state,
            unsigned long& count,
            const ::xml_schema::ro_string& ns,
            const ::xml_schema::ro_string& n,
            const ::xml_schema::ro_string* t,
            bool start)
  {
    XSD_UNUSED (count);
    XSD_UNUSED (ns);
    XSD_UNUSED (n);
    XSD_UNUSED (t);

    switch (state)
    {
      case 0UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->componentinstantiationref_parser_;

          if (this->componentinstantiationref_parser_)
            this->componentinstantiationref_parser_->pre ();
        }
        else
        {
          if (this->componentinstantiationref_parser_)
          {
            const ::std::string& tmp (this->componentinstantiationref_parser_->post_componentinstantiationref ());
            this->componentinstantiationref (tmp);
          }

          state = ~0UL;
        }

        break;
      }
      case 1UL:
      {
        if (start)
        {
          this->::xml_schema::complex_content::context_.top ().parser_ = this->findby_parser_;

          if (this->findby_parser_)
            this->findby_parser_->pre ();
        }
        else
        {
          if (this->findby_parser_)
          {
            const ::ossie::FindBy& tmp (this->findby_parser_->post_findby ());
            this->findby (tmp);
          }

          state = ~0UL;
        }

        break;
      }
    }
  }
}

namespace dcd
{
  // Attribute validation and dispatch functions for deviceconfiguration_pskel.
  //
  bool deviceconfiguration_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();
        this->id_parser_->_pre_impl ();
        this->id_parser_->_characters (s);
        this->id_parser_->_post_impl ();
        const ::std::string& tmp (this->id_parser_->post_string ());
        this->id (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      return true;
    }

    return false;
  }

  void deviceconfiguration_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.id = false;
  }

  void deviceconfiguration_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.id)
      this->_expected_attribute (
        "", "id");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for componentfile_pskel.
  //
  bool componentfile_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();
        this->id_parser_->_pre_impl ();
        this->id_parser_->_characters (s);
        this->id_parser_->_post_impl ();
        const ::std::string& tmp (this->id_parser_->post_string ());
        this->id (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
      return true;
    }

    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_string ());
        this->type (tmp);
      }

      return true;
    }

    return false;
  }

  void componentfile_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.id = false;
  }

  void componentfile_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.id)
      this->_expected_attribute (
        "", "id");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for localfile_pskel.
  //
  bool localfile_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    return false;
  }

  void localfile_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void localfile_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for componentfileref_pskel.
  //
  bool componentfileref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void componentfileref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void componentfileref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for deployondevice_pskel.
  //
  bool deployondevice_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void deployondevice_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void deployondevice_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for compositepartofdevice_pskel.
  //
  bool compositepartofdevice_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void compositepartofdevice_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void compositepartofdevice_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for devicepkgfile_pskel.
  //
  bool devicepkgfile_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_string ());
        this->type (tmp);
      }

      return true;
    }

    return false;
  }

  // Attribute validation and dispatch functions for componentinstantiation_pskel.
  //
  bool componentinstantiation_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();
        this->id_parser_->_pre_impl ();
        this->id_parser_->_characters (s);
        this->id_parser_->_post_impl ();
        const ::std::string& tmp (this->id_parser_->post_string ());
        this->id (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->id = true;
      return true;
    }

    return false;
  }

  void componentinstantiation_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.id = false;
  }

  void componentinstantiation_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.id)
      this->_expected_attribute (
        "", "id");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for devicethatloadedthiscomponentref_pskel.
  //
  bool devicethatloadedthiscomponentref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void devicethatloadedthiscomponentref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void devicethatloadedthiscomponentref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for deviceusedbythiscomponentref_pskel.
  //
  bool deviceusedbythiscomponentref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    if (n == "usesrefid" && ns.empty ())
    {
      if (this->usesrefid_parser_)
      {
        this->usesrefid_parser_->pre ();
        this->usesrefid_parser_->_pre_impl ();
        this->usesrefid_parser_->_characters (s);
        this->usesrefid_parser_->_post_impl ();
        const ::std::string& tmp (this->usesrefid_parser_->post_string ());
        this->usesrefid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->usesrefid = true;
      return true;
    }

    return false;
  }

  void deviceusedbythiscomponentref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
    as.usesrefid = false;
  }

  void deviceusedbythiscomponentref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");
    if (!as.usesrefid)
      this->_expected_attribute (
        "", "usesrefid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for simpleref_pskel.
  //
  bool simpleref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    if (n == "value" && ns.empty ())
    {
      if (this->value_parser_)
      {
        this->value_parser_->pre ();
        this->value_parser_->_pre_impl ();
        this->value_parser_->_characters (s);
        this->value_parser_->_post_impl ();
        const ::std::string& tmp (this->value_parser_->post_string ());
        this->value (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->value = true;
      return true;
    }

    return false;
  }

  void simpleref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
    as.value = false;
  }

  void simpleref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");
    if (!as.value)
      this->_expected_attribute (
        "", "value");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for simplesequenceref_pskel.
  //
  bool simplesequenceref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void simplesequenceref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void simplesequenceref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for structref_pskel.
  //
  bool structref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void structref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void structref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for structsequenceref_pskel.
  //
  bool structsequenceref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void structsequenceref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void structsequenceref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for componentinstantiationref_pskel.
  //
  bool componentinstantiationref_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "refid" && ns.empty ())
    {
      if (this->refid_parser_)
      {
        this->refid_parser_->pre ();
        this->refid_parser_->_pre_impl ();
        this->refid_parser_->_characters (s);
        this->refid_parser_->_post_impl ();
        const ::std::string& tmp (this->refid_parser_->post_string ());
        this->refid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->refid = true;
      return true;
    }

    return false;
  }

  void componentinstantiationref_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.refid = false;
  }

  void componentinstantiationref_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.refid)
      this->_expected_attribute (
        "", "refid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for namingservice_pskel.
  //
  bool namingservice_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->name = true;
      return true;
    }

    return false;
  }

  void namingservice_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.name = false;
  }

  void namingservice_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.name)
      this->_expected_attribute (
        "", "name");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for domainfinder_pskel.
  //
  bool domainfinder_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "type" && ns.empty ())
    {
      if (this->type_parser_)
      {
        this->type_parser_->pre ();
        this->type_parser_->_pre_impl ();
        this->type_parser_->_characters (s);
        this->type_parser_->_post_impl ();
        const ::std::string& tmp (this->type_parser_->post_string ());
        this->type (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->type = true;
      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (s);
        this->name_parser_->_post_impl ();
        const ::std::string& tmp (this->name_parser_->post_string ());
        this->name (tmp);
      }

      return true;
    }

    return false;
  }

  void domainfinder_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.type = false;
  }

  void domainfinder_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.type)
      this->_expected_attribute (
        "", "type");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for filesystemname_pskel.
  //
  bool filesystemname_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "mountname" && ns.empty ())
    {
      if (this->mountname_parser_)
      {
        this->mountname_parser_->pre ();
        this->mountname_parser_->_pre_impl ();
        this->mountname_parser_->_characters (s);
        this->mountname_parser_->_post_impl ();
        const ::std::string& tmp (this->mountname_parser_->post_string ());
        this->mountname (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->mountname = true;
      return true;
    }

    if (n == "deviceid" && ns.empty ())
    {
      if (this->deviceid_parser_)
      {
        this->deviceid_parser_->pre ();
        this->deviceid_parser_->_pre_impl ();
        this->deviceid_parser_->_characters (s);
        this->deviceid_parser_->_post_impl ();
        const ::std::string& tmp (this->deviceid_parser_->post_string ());
        this->deviceid (tmp);
      }

      static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->deviceid = true;
      return true;
    }

    return false;
  }

  void filesystemname_pskel::
  _pre_a_validate ()
  {
    this->v_state_attr_stack_.push ();
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    as.mountname = false;
    as.deviceid = false;
  }

  void filesystemname_pskel::
  _post_a_validate ()
  {
    v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

    if (!as.mountname)
      this->_expected_attribute (
        "", "mountname");
    if (!as.deviceid)
      this->_expected_attribute (
        "", "deviceid");

    this->v_state_attr_stack_.pop ();
  }

  // Attribute validation and dispatch functions for connectinterface_pskel.
  //
  bool connectinterface_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();
        this->id_parser_->_pre_impl ();
        this->id_parser_->_characters (s);
        this->id_parser_->_post_impl ();
        const ::std::string& tmp (this->id_parser_->post_string ());
        this->id (tmp);
      }

      return true;
    }

    return false;
  }
}

namespace dcd
{
}

// Begin epilogue.
//
//
// End epilogue.

