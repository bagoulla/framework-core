// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___XML_XSD_DCD_PSKEL_H
#define CXX___XML_XSD_DCD_PSKEL_H

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace dcd
{
  class deviceconfiguration_pskel;
  class devicemanagersoftpkg_pskel;
  class componentfiles_pskel;
  class componentfile_pskel;
  class localfile_pskel;
  class partitioning_pskel;
  class componentplacement_pskel;
  class componentfileref_pskel;
  class deployondevice_pskel;
  class compositepartofdevice_pskel;
  class devicepkgfile_pskel;
  class componentinstantiation_pskel;
  class componentproperties_pskel;
  class devicethatloadedthiscomponentref_pskel;
  class deviceusedbythiscomponentref_pskel;
  class simpleref_pskel;
  class simplesequenceref_pskel;
  class structref_pskel;
  class structsequenceref_pskel;
  class structvalue_pskel;
  class values_pskel;
  class componentinstantiationref_pskel;
  class domainmanager_pskel;
  class findby_pskel;
  class namingservice_pskel;
  class domainfinder_pskel;
  class filesystemnames_pskel;
  class filesystemname_pskel;
  class connections_pskel;
  class connectinterface_pskel;
  class usesport_pskel;
  class providesport_pskel;
  class componentsupportedinterface_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/validating/parser.hxx>
#include <xsd/cxx/parser/validating/exceptions.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/expat/elements.hxx>

#include "memory"
#include "map"
#include "../include/ossie/DeviceManagerConfiguration.h"

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Document type. See libxsd/xsd/cxx/parser/expat/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::expat::document< char > document;
}

namespace dcd
{
  class deviceconfiguration_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    description (const ::std::string&);

    virtual void
    devicemanagersoftpkg (const ::std::string&);

    virtual void
    componentfiles (const ::std::vector<ossie::ComponentFile>&);

    virtual void
    partitioning (const ::std::vector<ossie::ComponentPlacement>&);

    virtual void
    connections (const ::std::vector<ossie::Connection>&);

    virtual void
    domainmanager (const ::std::string&);

    virtual void
    filesystemnames ();

    virtual void
    id (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual ::std::auto_ptr<ossie::DeviceManagerConfiguration::DCD>
    post_deviceconfiguration () = 0;

    // Parser construction API.
    //
    void
    description_parser (::xml_schema::string_pskel&);

    void
    devicemanagersoftpkg_parser (::dcd::devicemanagersoftpkg_pskel&);

    void
    componentfiles_parser (::dcd::componentfiles_pskel&);

    void
    partitioning_parser (::dcd::partitioning_pskel&);

    void
    connections_parser (::dcd::connections_pskel&);

    void
    domainmanager_parser (::dcd::domainmanager_pskel&);

    void
    filesystemnames_parser (::dcd::filesystemnames_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* description */,
             ::dcd::devicemanagersoftpkg_pskel& /* devicemanagersoftpkg */,
             ::dcd::componentfiles_pskel& /* componentfiles */,
             ::dcd::partitioning_pskel& /* partitioning */,
             ::dcd::connections_pskel& /* connections */,
             ::dcd::domainmanager_pskel& /* domainmanager */,
             ::dcd::filesystemnames_pskel& /* filesystemnames */,
             ::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    deviceconfiguration_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* description_parser_;
    ::dcd::devicemanagersoftpkg_pskel* devicemanagersoftpkg_parser_;
    ::dcd::componentfiles_pskel* componentfiles_parser_;
    ::dcd::partitioning_pskel* partitioning_parser_;
    ::dcd::connections_pskel* connections_parser_;
    ::dcd::domainmanager_pskel* domainmanager_parser_;
    ::dcd::filesystemnames_pskel* filesystemnames_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::deviceconfiguration_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class devicemanagersoftpkg_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    localfile (const ::std::string&);

    virtual ::std::string
    post_devicemanagersoftpkg () = 0;

    // Parser construction API.
    //
    void
    localfile_parser (::dcd::localfile_pskel&);

    void
    parsers (::dcd::localfile_pskel& /* localfile */);

    // Constructor.
    //
    devicemanagersoftpkg_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dcd::localfile_pskel* localfile_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::devicemanagersoftpkg_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class componentfiles_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    componentfile (const ::ossie::ComponentFile&);

    virtual ::std::vector<ossie::ComponentFile>
    post_componentfiles () = 0;

    // Parser construction API.
    //
    void
    componentfile_parser (::dcd::componentfile_pskel&);

    void
    parsers (::dcd::componentfile_pskel& /* componentfile */);

    // Constructor.
    //
    componentfiles_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dcd::componentfile_pskel* componentfile_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::componentfiles_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class componentfile_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    localfile (const ::std::string&);

    virtual void
    id (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual ::ossie::ComponentFile
    post_componentfile () = 0;

    // Parser construction API.
    //
    void
    localfile_parser (::dcd::localfile_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    void
    parsers (::dcd::localfile_pskel& /* localfile */,
             ::xml_schema::string_pskel& /* id */,
             ::xml_schema::string_pskel& /* type */);

    // Constructor.
    //
    componentfile_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::dcd::localfile_pskel* localfile_parser_;
    ::xml_schema::string_pskel* id_parser_;
    ::xml_schema::string_pskel* type_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::componentfile_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class localfile_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual ::std::string
    post_localfile () = 0;

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    localfile_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class partitioning_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    componentplacement (const ::ossie::ComponentPlacement&);

    virtual ::std::vector<ossie::ComponentPlacement>
    post_partitioning () = 0;

    // Parser construction API.
    //
    void
    componentplacement_parser (::dcd::componentplacement_pskel&);

    void
    parsers (::dcd::componentplacement_pskel& /* componentplacement */);

    // Constructor.
    //
    partitioning_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dcd::componentplacement_pskel* componentplacement_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::partitioning_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class componentplacement_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    componentfileref (const ::std::string&);

    virtual void
    deployondevice (const ::std::string&);

    virtual void
    compositepartofdevice (const ::std::string&);

    virtual void
    devicepkgfile ();

    virtual void
    componentinstantiation (const ::ossie::ComponentInstantiation&);

    virtual ::ossie::ComponentPlacement
    post_componentplacement () = 0;

    // Parser construction API.
    //
    void
    componentfileref_parser (::dcd::componentfileref_pskel&);

    void
    deployondevice_parser (::dcd::deployondevice_pskel&);

    void
    compositepartofdevice_parser (::dcd::compositepartofdevice_pskel&);

    void
    devicepkgfile_parser (::dcd::devicepkgfile_pskel&);

    void
    componentinstantiation_parser (::dcd::componentinstantiation_pskel&);

    void
    parsers (::dcd::componentfileref_pskel& /* componentfileref */,
             ::dcd::deployondevice_pskel& /* deployondevice */,
             ::dcd::compositepartofdevice_pskel& /* compositepartofdevice */,
             ::dcd::devicepkgfile_pskel& /* devicepkgfile */,
             ::dcd::componentinstantiation_pskel& /* componentinstantiation */);

    // Constructor.
    //
    componentplacement_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dcd::componentfileref_pskel* componentfileref_parser_;
    ::dcd::deployondevice_pskel* deployondevice_parser_;
    ::dcd::compositepartofdevice_pskel* compositepartofdevice_parser_;
    ::dcd::devicepkgfile_pskel* devicepkgfile_parser_;
    ::dcd::componentinstantiation_pskel* componentinstantiation_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::componentplacement_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class componentfileref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    refid (const ::std::string&);

    virtual ::std::string
    post_componentfileref () = 0;

    // Parser construction API.
    //
    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    componentfileref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class deployondevice_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    refid (const ::std::string&);

    virtual ::std::string
    post_deployondevice () = 0;

    // Parser construction API.
    //
    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    deployondevice_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class compositepartofdevice_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    refid (const ::std::string&);

    virtual ::std::string
    post_compositepartofdevice () = 0;

    // Parser construction API.
    //
    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    compositepartofdevice_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class devicepkgfile_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    localfile (const ::std::string&);

    virtual void
    type (const ::std::string&);

    virtual void
    post_devicepkgfile ();

    // Parser construction API.
    //
    void
    localfile_parser (::dcd::localfile_pskel&);

    void
    type_parser (::xml_schema::string_pskel&);

    void
    parsers (::dcd::localfile_pskel& /* localfile */,
             ::xml_schema::string_pskel& /* type */);

    // Constructor.
    //
    devicepkgfile_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::dcd::localfile_pskel* localfile_parser_;
    ::xml_schema::string_pskel* type_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::devicepkgfile_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class componentinstantiation_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    usagename (const ::std::string&);

    virtual void
    componentproperties (const ::std::vector<ossie::ComponentProperty*>&);

    virtual void
    id (const ::std::string&);

    virtual ::ossie::ComponentInstantiation
    post_componentinstantiation () = 0;

    // Parser construction API.
    //
    void
    usagename_parser (::xml_schema::string_pskel&);

    void
    componentproperties_parser (::dcd::componentproperties_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* usagename */,
             ::dcd::componentproperties_pskel& /* componentproperties */,
             ::xml_schema::string_pskel& /* id */);

    // Constructor.
    //
    componentinstantiation_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* usagename_parser_;
    ::dcd::componentproperties_pskel* componentproperties_parser_;
    ::xml_schema::string_pskel* id_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::componentinstantiation_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool id;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class componentproperties_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    simpleref (ossie::SimplePropertyRef*);

    virtual void
    simplesequenceref (ossie::SimpleSequencePropertyRef*);

    virtual void
    structref (ossie::StructPropertyRef*);

    virtual void
    structsequenceref (ossie::StructSequencePropertyRef*);

    virtual ::std::vector<ossie::ComponentProperty*>
    post_componentproperties () = 0;

    // Parser construction API.
    //
    void
    simpleref_parser (::dcd::simpleref_pskel&);

    void
    simplesequenceref_parser (::dcd::simplesequenceref_pskel&);

    void
    structref_parser (::dcd::structref_pskel&);

    void
    structsequenceref_parser (::dcd::structsequenceref_pskel&);

    void
    parsers (::dcd::simpleref_pskel& /* simpleref */,
             ::dcd::simplesequenceref_pskel& /* simplesequenceref */,
             ::dcd::structref_pskel& /* structref */,
             ::dcd::structsequenceref_pskel& /* structsequenceref */);

    // Constructor.
    //
    componentproperties_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dcd::simpleref_pskel* simpleref_parser_;
    ::dcd::simplesequenceref_pskel* simplesequenceref_parser_;
    ::dcd::structref_pskel* structref_parser_;
    ::dcd::structsequenceref_pskel* structsequenceref_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::componentproperties_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class devicethatloadedthiscomponentref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    refid (const ::std::string&);

    virtual ::std::string
    post_devicethatloadedthiscomponentref () = 0;

    // Parser construction API.
    //
    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    devicethatloadedthiscomponentref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class deviceusedbythiscomponentref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    refid (const ::std::string&);

    virtual void
    usesrefid (const ::std::string&);

    virtual ::std::pair<std::string, std::string>
    post_deviceusedbythiscomponentref () = 0;

    // Parser construction API.
    //
    void
    refid_parser (::xml_schema::string_pskel&);

    void
    usesrefid_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* refid */,
             ::xml_schema::string_pskel& /* usesrefid */);

    // Constructor.
    //
    deviceusedbythiscomponentref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* refid_parser_;
    ::xml_schema::string_pskel* usesrefid_parser_;

    protected:
    struct v_state_attr_
    {
      bool refid;
      bool usesrefid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class simpleref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    refid (const ::std::string&);

    virtual void
    value (const ::std::string&);

    virtual ossie::SimplePropertyRef*
    post_simpleref () = 0;

    // Parser construction API.
    //
    void
    refid_parser (::xml_schema::string_pskel&);

    void
    value_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* refid */,
             ::xml_schema::string_pskel& /* value */);

    // Constructor.
    //
    simpleref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* refid_parser_;
    ::xml_schema::string_pskel* value_parser_;

    protected:
    struct v_state_attr_
    {
      bool refid;
      bool value;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class simplesequenceref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    values (const ::std::vector<std::string>&);

    virtual void
    refid (const ::std::string&);

    virtual ossie::SimpleSequencePropertyRef*
    post_simplesequenceref () = 0;

    // Parser construction API.
    //
    void
    values_parser (::dcd::values_pskel&);

    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::dcd::values_pskel& /* values */,
             ::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    simplesequenceref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::dcd::values_pskel* values_parser_;
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::simplesequenceref_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class structref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    simpleref (ossie::SimplePropertyRef*);

    virtual void
    refid (const ::std::string&);

    virtual ossie::StructPropertyRef*
    post_structref () = 0;

    // Parser construction API.
    //
    void
    simpleref_parser (::dcd::simpleref_pskel&);

    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::dcd::simpleref_pskel& /* simpleref */,
             ::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    structref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::dcd::simpleref_pskel* simpleref_parser_;
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::structref_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class structsequenceref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    structvalue (const ::std::map<std::string, std::string>&);

    virtual void
    refid (const ::std::string&);

    virtual ossie::StructSequencePropertyRef*
    post_structsequenceref () = 0;

    // Parser construction API.
    //
    void
    structvalue_parser (::dcd::structvalue_pskel&);

    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::dcd::structvalue_pskel& /* structvalue */,
             ::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    structsequenceref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::dcd::structvalue_pskel* structvalue_parser_;
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::structsequenceref_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class structvalue_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    simpleref (ossie::SimplePropertyRef*);

    virtual ::std::map<std::string, std::string>
    post_structvalue () = 0;

    // Parser construction API.
    //
    void
    simpleref_parser (::dcd::simpleref_pskel&);

    void
    parsers (::dcd::simpleref_pskel& /* simpleref */);

    // Constructor.
    //
    structvalue_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dcd::simpleref_pskel* simpleref_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::structvalue_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class values_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    value (const ::std::string&);

    virtual ::std::vector<std::string>
    post_values () = 0;

    // Parser construction API.
    //
    void
    value_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* value */);

    // Constructor.
    //
    values_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* value_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::values_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class componentinstantiationref_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    refid (const ::std::string&);

    virtual ::std::string
    post_componentinstantiationref () = 0;

    // Parser construction API.
    //
    void
    refid_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* refid */);

    // Constructor.
    //
    componentinstantiationref_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* refid_parser_;

    protected:
    struct v_state_attr_
    {
      bool refid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class domainmanager_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    namingservice (const ::std::string&);

    virtual void
    stringifiedobjectref (const ::std::string&);

    virtual ::std::string
    post_domainmanager () = 0;

    // Parser construction API.
    //
    void
    namingservice_parser (::dcd::namingservice_pskel&);

    void
    stringifiedobjectref_parser (::xml_schema::string_pskel&);

    void
    parsers (::dcd::namingservice_pskel& /* namingservice */,
             ::xml_schema::string_pskel& /* stringifiedobjectref */);

    // Constructor.
    //
    domainmanager_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dcd::namingservice_pskel* namingservice_parser_;
    ::xml_schema::string_pskel* stringifiedobjectref_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::domainmanager_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class findby_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    namingservice (const ::std::string&);

    virtual void
    stringifiedobjectref (const ::std::string&);

    virtual void
    domainfinder (const ::std::pair<std::string, std::string>&);

    virtual ::ossie::FindBy
    post_findby () = 0;

    // Parser construction API.
    //
    void
    namingservice_parser (::dcd::namingservice_pskel&);

    void
    stringifiedobjectref_parser (::xml_schema::string_pskel&);

    void
    domainfinder_parser (::dcd::domainfinder_pskel&);

    void
    parsers (::dcd::namingservice_pskel& /* namingservice */,
             ::xml_schema::string_pskel& /* stringifiedobjectref */,
             ::dcd::domainfinder_pskel& /* domainfinder */);

    // Constructor.
    //
    findby_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dcd::namingservice_pskel* namingservice_parser_;
    ::xml_schema::string_pskel* stringifiedobjectref_parser_;
    ::dcd::domainfinder_pskel* domainfinder_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::findby_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class namingservice_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    name (const ::std::string&);

    virtual ::std::string
    post_namingservice () = 0;

    // Parser construction API.
    //
    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    namingservice_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_attr_
    {
      bool name;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class domainfinder_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    type (const ::std::string&);

    virtual void
    name (const ::std::string&);

    virtual ::std::pair<std::string, std::string>
    post_domainfinder () = 0;

    // Parser construction API.
    //
    void
    type_parser (::xml_schema::string_pskel&);

    void
    name_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* type */,
             ::xml_schema::string_pskel& /* name */);

    // Constructor.
    //
    domainfinder_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* type_parser_;
    ::xml_schema::string_pskel* name_parser_;

    protected:
    struct v_state_attr_
    {
      bool type;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class filesystemnames_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    filesystemname ();

    virtual void
    post_filesystemnames ();

    // Parser construction API.
    //
    void
    filesystemname_parser (::dcd::filesystemname_pskel&);

    void
    parsers (::dcd::filesystemname_pskel& /* filesystemname */);

    // Constructor.
    //
    filesystemnames_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dcd::filesystemname_pskel* filesystemname_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::filesystemnames_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class filesystemname_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    mountname (const ::std::string&);

    virtual void
    deviceid (const ::std::string&);

    virtual void
    post_filesystemname ();

    // Parser construction API.
    //
    void
    mountname_parser (::xml_schema::string_pskel&);

    void
    deviceid_parser (::xml_schema::string_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* mountname */,
             ::xml_schema::string_pskel& /* deviceid */);

    // Constructor.
    //
    filesystemname_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::xml_schema::string_pskel* mountname_parser_;
    ::xml_schema::string_pskel* deviceid_parser_;

    protected:
    struct v_state_attr_
    {
      bool mountname;
      bool deviceid;
    };

    v_state_attr_ v_state_attr_first_;
    ::xsd::cxx::parser::pod_stack v_state_attr_stack_;

    virtual void
    _pre_a_validate ();

    virtual void
    _post_a_validate ();
  };

  class connections_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    connectinterface (const ::ossie::Connection&);

    virtual ::std::vector<ossie::Connection>
    post_connections () = 0;

    // Parser construction API.
    //
    void
    connectinterface_parser (::dcd::connectinterface_pskel&);

    void
    parsers (::dcd::connectinterface_pskel& /* connectinterface */);

    // Constructor.
    //
    connections_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::dcd::connectinterface_pskel* connectinterface_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::connections_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[2UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);
  };

  class connectinterface_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    usesport (const ::ossie::UsesPort&);

    virtual void
    providesport (const ::ossie::ProvidesPort&);

    virtual void
    componentsupportedinterface (const ::ossie::ComponentSupportedInterface&);

    virtual void
    findby (const ::ossie::FindBy&);

    virtual void
    id (const ::std::string&);

    virtual ::ossie::Connection
    post_connectinterface () = 0;

    // Parser construction API.
    //
    void
    usesport_parser (::dcd::usesport_pskel&);

    void
    providesport_parser (::dcd::providesport_pskel&);

    void
    componentsupportedinterface_parser (::dcd::componentsupportedinterface_pskel&);

    void
    findby_parser (::dcd::findby_pskel&);

    void
    id_parser (::xml_schema::string_pskel&);

    void
    parsers (::dcd::usesport_pskel& /* usesport */,
             ::dcd::providesport_pskel& /* providesport */,
             ::dcd::componentsupportedinterface_pskel& /* componentsupportedinterface */,
             ::dcd::findby_pskel& /* findby */,
             ::xml_schema::string_pskel& /* id */);

    // Constructor.
    //
    connectinterface_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl_phase_one (const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&,
                               const ::xml_schema::ro_string&);


    protected:
    ::dcd::usesport_pskel* usesport_parser_;
    ::dcd::providesport_pskel* providesport_parser_;
    ::dcd::componentsupportedinterface_pskel* componentsupportedinterface_parser_;
    ::dcd::findby_pskel* findby_parser_;
    ::xml_schema::string_pskel* id_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::connectinterface_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class usesport_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    usesidentifier (const ::std::string&);

    virtual void
    componentinstantiationref (const ::std::string&);

    virtual void
    devicethatloadedthiscomponentref (const ::std::string&);

    virtual void
    deviceusedbythiscomponentref (const ::std::pair<std::string, std::string>&);

    virtual void
    findby (const ::ossie::FindBy&);

    virtual ::ossie::UsesPort
    post_usesport () = 0;

    // Parser construction API.
    //
    void
    usesidentifier_parser (::xml_schema::string_pskel&);

    void
    componentinstantiationref_parser (::dcd::componentinstantiationref_pskel&);

    void
    devicethatloadedthiscomponentref_parser (::dcd::devicethatloadedthiscomponentref_pskel&);

    void
    deviceusedbythiscomponentref_parser (::dcd::deviceusedbythiscomponentref_pskel&);

    void
    findby_parser (::dcd::findby_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* usesidentifier */,
             ::dcd::componentinstantiationref_pskel& /* componentinstantiationref */,
             ::dcd::devicethatloadedthiscomponentref_pskel& /* devicethatloadedthiscomponentref */,
             ::dcd::deviceusedbythiscomponentref_pskel& /* deviceusedbythiscomponentref */,
             ::dcd::findby_pskel& /* findby */);

    // Constructor.
    //
    usesport_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* usesidentifier_parser_;
    ::dcd::componentinstantiationref_pskel* componentinstantiationref_parser_;
    ::dcd::devicethatloadedthiscomponentref_pskel* devicethatloadedthiscomponentref_parser_;
    ::dcd::deviceusedbythiscomponentref_pskel* deviceusedbythiscomponentref_parser_;
    ::dcd::findby_pskel* findby_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::usesport_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class providesport_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    providesidentifier (const ::std::string&);

    virtual void
    componentinstantiationref (const ::std::string&);

    virtual void
    devicethatloadedthiscomponentref (const ::std::string&);

    virtual void
    deviceusedbythiscomponentref (const ::std::pair<std::string, std::string>&);

    virtual void
    findby (const ::ossie::FindBy&);

    virtual ::ossie::ProvidesPort
    post_providesport () = 0;

    // Parser construction API.
    //
    void
    providesidentifier_parser (::xml_schema::string_pskel&);

    void
    componentinstantiationref_parser (::dcd::componentinstantiationref_pskel&);

    void
    devicethatloadedthiscomponentref_parser (::dcd::devicethatloadedthiscomponentref_pskel&);

    void
    deviceusedbythiscomponentref_parser (::dcd::deviceusedbythiscomponentref_pskel&);

    void
    findby_parser (::dcd::findby_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* providesidentifier */,
             ::dcd::componentinstantiationref_pskel& /* componentinstantiationref */,
             ::dcd::devicethatloadedthiscomponentref_pskel& /* devicethatloadedthiscomponentref */,
             ::dcd::deviceusedbythiscomponentref_pskel& /* deviceusedbythiscomponentref */,
             ::dcd::findby_pskel& /* findby */);

    // Constructor.
    //
    providesport_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* providesidentifier_parser_;
    ::dcd::componentinstantiationref_pskel* componentinstantiationref_parser_;
    ::dcd::devicethatloadedthiscomponentref_pskel* devicethatloadedthiscomponentref_parser_;
    ::dcd::deviceusedbythiscomponentref_pskel* deviceusedbythiscomponentref_parser_;
    ::dcd::findby_pskel* findby_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::providesport_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };

  class componentsupportedinterface_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    supportedidentifier (const ::std::string&);

    virtual void
    componentinstantiationref (const ::std::string&);

    virtual void
    findby (const ::ossie::FindBy&);

    virtual ::ossie::ComponentSupportedInterface
    post_componentsupportedinterface () = 0;

    // Parser construction API.
    //
    void
    supportedidentifier_parser (::xml_schema::string_pskel&);

    void
    componentinstantiationref_parser (::dcd::componentinstantiationref_pskel&);

    void
    findby_parser (::dcd::findby_pskel&);

    void
    parsers (::xml_schema::string_pskel& /* supportedidentifier */,
             ::dcd::componentinstantiationref_pskel& /* componentinstantiationref */,
             ::dcd::findby_pskel& /* findby */);

    // Constructor.
    //
    componentsupportedinterface_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::string_pskel* supportedidentifier_parser_;
    ::dcd::componentinstantiationref_pskel* componentinstantiationref_parser_;
    ::dcd::findby_pskel* findby_parser_;

    protected:
    struct v_state_descr_
    {
      void (::dcd::componentsupportedinterface_pskel::*func) (
        unsigned long&,
        unsigned long&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string&,
        const ::xml_schema::ro_string*,
        bool);
      unsigned long state;
      unsigned long count;
    };

    struct v_state_
    {
      v_state_descr_ data[3UL];
      unsigned long size;
    };

    v_state_ v_state_first_;
    ::xsd::cxx::parser::pod_stack v_state_stack_;

    virtual void
    _pre_e_validate ();

    virtual void
    _post_e_validate ();

    void
    sequence_0 (unsigned long& state,
                unsigned long& count,
                const ::xml_schema::ro_string& ns,
                const ::xml_schema::ro_string& n,
                const ::xml_schema::ro_string* t,
                bool start);

    void
    choice_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start);
  };
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___XML_XSD_DCD_PSKEL_H
